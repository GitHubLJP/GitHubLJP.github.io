[{"title":"Hello World","url":"http://trajepl.github.io/2017/06/08/hello-world/","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"CCF-A of DB&&DM","url":"http://trajepl.github.io/2017/05/16/CCF-A-of-DB-DM/","content":"<h1 id=\"The-famous-conferences-or-journals-of-DB-and-DM\"><a href=\"#The-famous-conferences-or-journals-of-DB-and-DM\" class=\"headerlink\" title=\"The famous conferences or journals of DB and DM\"></a>The famous conferences or journals of DB and DM</h1><h2 id=\"Database\"><a href=\"#Database\" class=\"headerlink\" title=\"Database\"></a>Database</h2><ul>\n<li><a href=\"http://dblp.uni-trier.de/db/conf/sigmod/\" target=\"_blank\" rel=\"external\">ACM SIGMOD Conference</a></li>\n<li><a href=\"http://dblp.uni-trier.de/db/conf/icde/\" target=\"_blank\" rel=\"external\">International Conference on Data Engineering (ICDE)</a></li>\n<li><a href=\"http://dblp.uni-trier.de/db/conf/vldb/\" target=\"_blank\" rel=\"external\">Very Large Data Bases (VLDB) Conference</a></li>\n</ul>\n<h2 id=\"Data-Mining\"><a href=\"#Data-Mining\" class=\"headerlink\" title=\"Data Mining\"></a>Data Mining</h2><ul>\n<li><a href=\"http://dblp.uni-trier.de/db/conf/kdd/\" target=\"_blank\" rel=\"external\">Knowledge Discovery and Data Mining (KDD)</a></li>\n<li><a href=\"http://dblp.uni-trier.de/db/journals/sigkdd/\" target=\"_blank\" rel=\"external\">ACM Special Interest Group on Knowledge Discovery and Data Mining (SIGKDD)</a></li>\n<li><a href=\"http://dblp.uni-trier.de/db/conf/incdm/\" target=\"_blank\" rel=\"external\">Industrial Conference on Data Mining (ICDM)</a></li>\n</ul>\n"},{"title":"Base64","url":"http://trajepl.github.io/2016/10/18/Base64/","content":"<h1 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h1><p>C and Java implements for Base64 encode and decode</p>\n<h2 id=\"Unsigned-short-int-转换为二进制字符串\"><a href=\"#Unsigned-short-int-转换为二进制字符串\" class=\"headerlink\" title=\"Unsigned short int 转换为二进制字符串\"></a>Unsigned short int 转换为二进制字符串</h2><p>c语言中unsigned short 的数值范围是 0~65535<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">binary_print</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> v, <span class=\"keyword\">char</span> *src)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = <span class=\"keyword\">sizeof</span>(v) * <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> bit = v &amp; (<span class=\"number\">1</span> &lt;&lt; (size - i - <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bit == <span class=\"number\">0</span>) src[i]=<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t \t<span class=\"keyword\">else</span> src[i] =<span class=\"string\">'1'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tsrc[<span class=\"number\">16</span>] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实验结果展示： </p>\n<p><img src=\"https://github.com/trajepl/ljp/blob/master/pic/binary_show.png?raw=true\" alt=\"show\"></p>\n<p>通过实验，显示当输入范围不在0~65535之间的时候，转换过程结束。main函数中部分调用如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// convert to binary output.</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"-----Binary convert-----\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> v;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> flag;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> src_bit[<span class=\"number\">17</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Input a unsigned short int(end with number &lt; 0):\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;flag);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(flag &gt;= <span class=\"number\">0</span> &amp;&amp; flag &lt;= <span class=\"number\">65535</span>) &#123;</span><br><span class=\"line\">\t\tv = flag;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(v &lt; <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    binary_print(v, src_bit);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Binary char: \"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(src_bit);</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;flag);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Base64的简单实现\"><a href=\"#Base64的简单实现\" class=\"headerlink\" title=\"Base64的简单实现\"></a>Base64的简单实现</h2><p>Base64是网络上一种常见的交换码。既然是交换码，就符合交换码的主要思想：在数据通过网络传输之前对之进行编码，使之符合网络传递的要求，在接收到编码过得数据后对之进行解码，从而恢复数据。<br>Base64是如今互联网应用最多的一种编码，大多数的电子邮件软件都把它作为默认的编码方式。</p>\n<h3 id=\"编码原理：\"><a href=\"#编码原理：\" class=\"headerlink\" title=\"编码原理：\"></a>编码原理：</h3><p>编码的时候，将三个byte的数据，先后放入一个24bit的缓冲区中，先来的byte占高位。数据不足3byte的话，于缓冲区中剩下的bit用0补足。然后，每次取出6个bit，按照其值选择[a-zA-Z0-9+/]中的字符作为编码后的输出。不断进行，直到全部输入数据转换完成。</p>\n<p>如果最后剩下两个输入数据，在编码结果后加1个“=”；如果最后剩下一个输入数据，编码结果后加2个“=”；如果没有剩下任何数据，就什么都不要加，这样才可以保证资料还原的正确性。</p>\n<p>编码后的数据比原始数据略长，为原来的4/3。无论什么样的字符都会全部被编码</p>\n<p>编码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Base64Encode</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *src, <span class=\"keyword\">char</span> *des)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t <span class=\"keyword\">while</span>(*(src + len) != <span class=\"string\">'\\0'</span>) len++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(*src == <span class=\"string\">'\\0'</span> || len &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *p = src;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *p_end = src + len;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p_end - p &gt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t*des ++ = base64_index[p[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t*des ++ = base64_index[((p[<span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x30</span>) | (p[<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">4</span>)];</span><br><span class=\"line\">\t\t*des ++ = base64_index[((p[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x3C</span>) | (p[<span class=\"number\">2</span>] &gt;&gt; <span class=\"number\">6</span>)];</span><br><span class=\"line\">\t\t*des ++ = base64_index[p[<span class=\"number\">2</span>] &amp; <span class=\"number\">0x3F</span>];</span><br><span class=\"line\">\t\tp += <span class=\"number\">3</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p_end - p &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t*des++ = base64_index[p[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((p_end - p) == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t*des ++ = base64_index[( (p[<span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x30</span> ) | ( p[<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">4</span> )];  </span><br><span class=\"line\">\t\t\t*des ++ = base64_index[(p[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x3C</span>]; </span><br><span class=\"line\">         \t*des++ = <span class=\"string\">'='</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p_end - p == <span class=\"number\">1</span>) &#123;  </span><br><span class=\"line\">\t        *des++ = base64_index[(p[<span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x30</span>];  </span><br><span class=\"line\">\t        *des++ = <span class=\"string\">'='</span>;  </span><br><span class=\"line\">        \t*des++ = <span class=\"string\">'='</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*des =<span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解码原理\"><a href=\"#解码原理\" class=\"headerlink\" title=\"解码原理\"></a>解码原理</h3><p>解码作为编码的逆过程，就显得比较简单了， 分析原先的编码过程，很容易得出最后的解码过程，代码实现如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">base64_decode_map</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(base64_index[i++] != <span class=\"string\">'\\0'</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(base64_index[i<span class=\"number\">-1</span>] == c) <span class=\"keyword\">return</span> i<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Base64Decode</span><span class=\"params\">(<span class=\"keyword\">char</span> *src, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* des)</span> </span>&#123;</span><br><span class=\"line\">\t*des = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(src);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(len % <span class=\"number\">4</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *p = src;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *p_end = src + len;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(; p &lt; p_end; p+=<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">\t\t*des ++ = ( (base64_decode_map(p[<span class=\"number\">0</span>]) &lt;&lt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0xFC</span> ) | ( (base64_decode_map(p[<span class=\"number\">1</span>]) &gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x03</span> );</span><br><span class=\"line\">\t\t*des ++ = ( (base64_decode_map(p[<span class=\"number\">1</span>]) &lt;&lt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0xF0</span> ) | ( (base64_decode_map(p[<span class=\"number\">2</span>]) &gt;&gt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x0F</span> );</span><br><span class=\"line\">\t\t*des ++ = ( (base64_decode_map(p[<span class=\"number\">2</span>]) &lt;&lt; <span class=\"number\">6</span>) &amp; <span class=\"number\">0xC0</span> ) | ( base64_decode_map(p[<span class=\"number\">3</span>]));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( *(src + len - <span class=\"number\">2</span>) == <span class=\"string\">'='</span> ) </span><br><span class=\"line\">\t\t*(des - <span class=\"number\">2</span>) = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( *(src + len - <span class=\"number\">1</span>) == <span class=\"string\">'='</span>)</span><br><span class=\"line\">\t\t*(des - <span class=\"number\">1</span>) = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"结果展示：\"><a href=\"#结果展示：\" class=\"headerlink\" title=\"结果展示：\"></a>结果展示：</h3><p><img src=\"https://github.com/trajepl/ljp/blob/master/pic/decodeEncode.png?raw=true\" alt=\"decode\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>完整代码地址：<a href=\"https://github.com/trajepl/Base64\" target=\"_blank\" rel=\"external\">Base64</a><br>对Base64的简单实现。对于文件，图片，音频，视频等的实现的传输，Base64也发挥很大最用。随后补上Java的文件编码实现。</p>\n"},{"title":"about","url":"http://trajepl.github.io/about/index.html","content":""},{"title":"[object Object]","url":"http://trajepl.github.io/categories/index.html","content":""},{"title":"category","url":"http://trajepl.github.io/category/index.html","content":""},{"title":"link","url":"http://trajepl.github.io/link/index.html","content":""},{"title":"project","url":"http://trajepl.github.io/project/index.html","content":""},{"title":"search","url":"http://trajepl.github.io/search/index.html","content":""},{"title":"tag","url":"http://trajepl.github.io/tag/index.html","content":""},{"title":"tags","url":"http://trajepl.github.io/tags/index.html","content":""}]