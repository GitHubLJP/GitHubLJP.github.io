[{"title":"Bit Manipulation","url":"http://trajepl.github.io/2017/07/02/Bit-Manipulation/","content":"<h1 id=\"Bit-Manipulation\"><a href=\"#Bit-Manipulation\" class=\"headerlink\" title=\"Bit Manipulation\"></a>Bit Manipulation</h1><hr>\n<p>Bit manipulation is the act of algorithmically manipulating bits or other pieces of data shorter than a word. Computer programming tasks that require bit manipulation include low-level device control, error detection and correction algorithms, data compression, encryption algorithms, and optimization. For most other tasks, modern programming languages allow the programmer to work directly with abstractions instead of bits that represent those abstractions. Source code that does bit manipulation makes use of the bitwise operations: AND, OR, XOR, NOT, and bit shifts.</p>\n<p>Bit manipulation, in some cases, can obviate or reduce the need to loop over a data structure and can give many-fold speed ups, as bit manipulations are processed in parallel, but the code can become more difficult to write and maintain.<br><a id=\"more\"></a></p>\n<h2 id=\"Details\"><a href=\"#Details\" class=\"headerlink\" title=\"Details\"></a>Details</h2><h3 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a>Basics</h3><p>At the heart of bit manipulation are the bit-wise operators &amp; (and), | (or), ~ (not) and ^ (exclusive-or, xor) and shift operators a &lt;&lt; b and a &gt;&gt; b.</p>\n<p>There is no boolean operator counterpart to bitwise exclusive-or, but there is a simple explanation. The exclusive-or operation takes two inputs and returns a 1 if either one or the other of the inputs is a 1, but not if both are. That is, if both inputs are 1 or both inputs are 0, it returns 0. Bitwise exclusive-or, with the operator of a caret, ^, performs the exclusive-or operation on each pair of bits. Exclusive-or is commonly abbreviated XOR.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set union A | B</span><br><span class=\"line\">Set intersection A &amp; B</span><br><span class=\"line\">Set subtraction A &amp; ~B</span><br><span class=\"line\">Set negation ALL_BITS ^ A or ~A</span><br><span class=\"line\">Set bit A |= 1 &lt;&lt; bit</span><br><span class=\"line\">Clear bit A &amp;= ~(1 &lt;&lt; bit)</span><br><span class=\"line\">Test bit (A &amp; 1 &lt;&lt; bit) != 0</span><br><span class=\"line\">Extract last bit A&amp;-A or A&amp;~(A-1) or x^(x&amp;(x-1))</span><br><span class=\"line\">Remove last bit A&amp;(A-1)</span><br><span class=\"line\">Get all 1-bits ~0</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><p>Count the number of ones in the binary representation of the given number<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int count_one(int n) &#123;</span><br><span class=\"line\">    while(n) &#123;</span><br><span class=\"line\">        n = n&amp;(n-1);</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Is power of four (actually map-checking, iterative and recursive methods can do the same)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool isPowerOfFour(int n) &#123;</span><br><span class=\"line\">    return !(n&amp;(n-1)) &amp;&amp; (n&amp;0x55555555);</span><br><span class=\"line\">    //check the 1-bit location;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"tricks\"><a href=\"#tricks\" class=\"headerlink\" title=\"^ tricks\"></a>^ tricks</h4><p>Use ^ to remove even exactly same numbers and save the odd, or save the distinct bits and remove the same.</p>\n<p>Sum of Two Integers<br>Use ^ and &amp; to add two integers<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int getSum(int a, int b) &#123;</span><br><span class=\"line\">    return b==0? a:getSum(a^b, (a&amp;b)&lt;&lt;1); //be careful about the terminating condition;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Missing Number</p>\n<p>Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array. For example, Given nums = [0, 1, 3] return 2. (Of course, you can do this by math.)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int missingNumber(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\">    int ret = 0;</span><br><span class=\"line\">    for(int i = 0; i &lt; nums.size(); ++i) &#123;</span><br><span class=\"line\">        ret ^= i;</span><br><span class=\"line\">        ret ^= nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ret^=nums.size();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"tricks-1\"><a href=\"#tricks-1\" class=\"headerlink\" title=\"| tricks\"></a>| tricks</h4><p>Keep as many 1-bits as possible</p>\n<p>Find the largest power of 2 (most significant bit in binary form), which is less than or equal to the given number N.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long largest_power(long N) &#123;</span><br><span class=\"line\">    //changing all right side bits to 1.</span><br><span class=\"line\">    N = N | (N&gt;&gt;1);</span><br><span class=\"line\">    N = N | (N&gt;&gt;2);</span><br><span class=\"line\">    N = N | (N&gt;&gt;4);</span><br><span class=\"line\">    N = N | (N&gt;&gt;8);</span><br><span class=\"line\">    N = N | (N&gt;&gt;16);</span><br><span class=\"line\">    return (N+1)&gt;&gt;1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Reverse Bits</p>\n<p>Reverse bits of a given 32 bits unsigned integer.</p>\n<p>Solution<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uint32_t reverseBits(uint32_t n) &#123;</span><br><span class=\"line\">    unsigned int mask = 1&lt;&lt;31, res = 0;</span><br><span class=\"line\">    for(int i = 0; i &lt; 32; ++i) &#123;</span><br><span class=\"line\">        if(n &amp; 1) res |= mask;</span><br><span class=\"line\">        mask &gt;&gt;= 1;</span><br><span class=\"line\">        n &gt;&gt;= 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">uint32_t reverseBits(uint32_t n) &#123;</span><br><span class=\"line\">\tuint32_t mask = 1, ret = 0;</span><br><span class=\"line\">\tfor(int i = 0; i &lt; 32; ++i)&#123;</span><br><span class=\"line\">\t\tret &lt;&lt;= 1;</span><br><span class=\"line\">\t\tif(mask &amp; n) ret |= 1;</span><br><span class=\"line\">\t\tmask &lt;&lt;= 1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"amp-tricks\"><a href=\"#amp-tricks\" class=\"headerlink\" title=\"&amp; tricks\"></a>&amp; tricks</h4><p>Just selecting certain bits</p>\n<p>Reversing the bits in integer<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = ((x &amp; 0xaaaaaaaa) &gt;&gt; 1) | ((x &amp; 0x55555555) &lt;&lt; 1);</span><br><span class=\"line\">x = ((x &amp; 0xcccccccc) &gt;&gt; 2) | ((x &amp; 0x33333333) &lt;&lt; 2);</span><br><span class=\"line\">x = ((x &amp; 0xf0f0f0f0) &gt;&gt; 4) | ((x &amp; 0x0f0f0f0f) &lt;&lt; 4);</span><br><span class=\"line\">x = ((x &amp; 0xff00ff00) &gt;&gt; 8) | ((x &amp; 0x00ff00ff) &lt;&lt; 8);</span><br><span class=\"line\">x = ((x &amp; 0xffff0000) &gt;&gt; 16) | ((x &amp; 0x0000ffff) &lt;&lt; 16);</span><br></pre></td></tr></table></figure></p>\n<p>Bitwise AND of Numbers Range</p>\n<p>Given a range [m, n] where 0 &lt;= m &lt;= n &lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive. For example, given the range [5, 7], you should return 4.</p>\n<p>Solution<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int rangeBitwiseAnd(int m, int n) &#123;</span><br><span class=\"line\">    int a = 0;</span><br><span class=\"line\">    while(m != n) &#123;</span><br><span class=\"line\">        m &gt;&gt;= 1;</span><br><span class=\"line\">        n &gt;&gt;= 1;</span><br><span class=\"line\">        a++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return m&lt;&lt;a; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Number of 1 Bits</p>\n<p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).</p>\n<p>Solution<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int hammingWeight(uint32_t n) &#123;</span><br><span class=\"line\">\tint count = 0;</span><br><span class=\"line\">\twhile(n) &#123;</span><br><span class=\"line\">\t\tn = n&amp;(n-1);</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int hammingWeight(uint32_t n) &#123;</span><br><span class=\"line\">    ulong mask = 1;</span><br><span class=\"line\">    int count = 0;</span><br><span class=\"line\">    for(int i = 0; i &lt; 32; ++i)&#123; //31 will not do, delicate;</span><br><span class=\"line\">        if(mask &amp; n) count++;</span><br><span class=\"line\">        mask &lt;&lt;= 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h4><p>Repeated DNA Sequences</p>\n<p>All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: “ACGAATTCCG”. When studying DNA, it is sometimes useful to identify repeated sequences within the DNA. Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.<br>For example,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given s = &quot;AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT&quot;,</span><br><span class=\"line\">Return: [&quot;AAAAACCCCC&quot;, &quot;CCCCCAAAAA&quot;].</span><br></pre></td></tr></table></figure></p>\n<p>Solution<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    vector&lt;string&gt; findRepeatedDnaSequences(string s) &#123;</span><br><span class=\"line\">        int sLen = s.length();</span><br><span class=\"line\">        vector&lt;string&gt; v;</span><br><span class=\"line\">        if(sLen &lt; 11) return v;</span><br><span class=\"line\">        char keyMap[1&lt;&lt;21]&#123;0&#125;;</span><br><span class=\"line\">        int hashKey = 0;</span><br><span class=\"line\">        for(int i = 0; i &lt; 9; ++i) hashKey = (hashKey&lt;&lt;2) | (s[i]-&apos;A&apos;+1)%5;</span><br><span class=\"line\">        for(int i = 9; i &lt; sLen; ++i) &#123;</span><br><span class=\"line\">            if(keyMap[hashKey = ((hashKey&lt;&lt;2)|(s[i]-&apos;A&apos;+1)%5)&amp;0xfffff]++ == 1)</span><br><span class=\"line\">                v.push_back(s.substr(i-9, 10));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>But the above solution can be invalid when repeated sequence appears too many times, in which case we should use unordered_map<int, int=\"\"> keyMap to replace char keyMap[1&lt;&lt;21]{0}here.<br>Majority Element</int,></p>\n<p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times. (bit-counting as a usual way, but here we actually also can adopt sorting and Moore Voting Algorithm)</p>\n<p>Solution<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int majorityElement(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\">    int len = sizeof(int)*8, size = nums.size();</span><br><span class=\"line\">    int count = 0, mask = 1, ret = 0;</span><br><span class=\"line\">    for(int i = 0; i &lt; len; ++i) &#123;</span><br><span class=\"line\">        count = 0;</span><br><span class=\"line\">        for(int j = 0; j &lt; size; ++j)</span><br><span class=\"line\">            if(mask &amp; nums[j]) count++;</span><br><span class=\"line\">        if(count &gt; size/2) ret |= mask;</span><br><span class=\"line\">        mask &lt;&lt;= 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Single Number III</p>\n<p>Given an array of integers, every element appears three times except for one. Find that single one. (Still this type can be solved by bit-counting easily.) But we are going to solve it by digital logic design</p>\n<p>Solution<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//inspired by logical circuit design and boolean algebra;</span><br><span class=\"line\">//counter - unit of 3;</span><br><span class=\"line\">//current   incoming  next</span><br><span class=\"line\">//a b            c    a b</span><br><span class=\"line\">//0 0            0    0 0</span><br><span class=\"line\">//0 1            0    0 1</span><br><span class=\"line\">//1 0            0    1 0</span><br><span class=\"line\">//0 0            1    0 1</span><br><span class=\"line\">//0 1            1    1 0</span><br><span class=\"line\">//1 0            1    0 0</span><br><span class=\"line\">//a = a&amp;~b&amp;~c + ~a&amp;b&amp;c;</span><br><span class=\"line\">//b = ~a&amp;b&amp;~c + ~a&amp;~b&amp;c;</span><br><span class=\"line\">//return a|b since the single number can appear once or twice;</span><br><span class=\"line\">int singleNumber(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\">    int t = 0, a = 0, b = 0;</span><br><span class=\"line\">    for(int i = 0; i &lt; nums.size(); ++i) &#123;</span><br><span class=\"line\">        t = (a&amp;~b&amp;~nums[i]) | (~a&amp;b&amp;nums[i]);</span><br><span class=\"line\">        b = (~a&amp;b&amp;~nums[i]) | (~a&amp;~b&amp;nums[i]);</span><br><span class=\"line\">        a = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return a | b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Maximum Product of Word Lengths</p>\n<p>Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1:</span><br><span class=\"line\">Given [&quot;abcw&quot;, &quot;baz&quot;, &quot;foo&quot;, &quot;bar&quot;, &quot;xtfn&quot;, &quot;abcdef&quot;]</span><br><span class=\"line\">Return 16</span><br><span class=\"line\">The two words can be &quot;abcw&quot;, &quot;xtfn&quot;.</span><br><span class=\"line\">Example 2:</span><br><span class=\"line\">Given [&quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;, &quot;d&quot;, &quot;cd&quot;, &quot;bcd&quot;, &quot;abcd&quot;]</span><br><span class=\"line\">Return 4</span><br><span class=\"line\">The two words can be &quot;ab&quot;, &quot;cd&quot;.</span><br><span class=\"line\">Example 3:</span><br><span class=\"line\">Given [&quot;a&quot;, &quot;aa&quot;, &quot;aaa&quot;, &quot;aaaa&quot;]</span><br><span class=\"line\">Return 0</span><br><span class=\"line\">No such pair of words.</span><br></pre></td></tr></table></figure></p>\n<p>Solution</p>\n<p>Since we are going to use the length of the word very frequently and we are to compare the letters of two words checking whether they have some letters in common:</p>\n<p>using an array of int to pre-store the length of each word reducing the frequently measuring process;<br>since int has 4 bytes, a 32-bit type, and there are only 26 different letters, so we can just use one bit to indicate the existence of the letter in a word.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int maxProduct(vector&lt;string&gt;&amp; words) &#123;</span><br><span class=\"line\">    vector&lt;int&gt; mask(words.size());</span><br><span class=\"line\">    vector&lt;int&gt; lens(words.size());</span><br><span class=\"line\">    for(int i = 0; i &lt; words.size(); ++i) lens[i] = words[i].length();</span><br><span class=\"line\">    int result = 0;</span><br><span class=\"line\">    for (int i=0; i&lt;words.size(); ++i) &#123;</span><br><span class=\"line\">        for (char c : words[i])</span><br><span class=\"line\">            mask[i] |= 1 &lt;&lt; (c - &apos;a&apos;);</span><br><span class=\"line\">        for (int j=0; j&lt;i; ++j)</span><br><span class=\"line\">            if (!(mask[i] &amp; mask[j]))</span><br><span class=\"line\">                result = max(result, lens[i]*lens[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Attention</strong></p>\n<p>result after shifting left(or right) too much is undefined<br>right shifting operations on negative values are undefined<br>right operand in shifting should be non-negative, otherwise the result is undefined<br>The &amp; and | operators have lower precedence than comparison operators<br>Sets<br>All the subsets<br>A big advantage of bit manipulation is that it is trivial to iterate over all the subsets of an N-element set: every N-bit value represents some subset. Even better, if A is a subset of B then the number representing A is less than that representing B, which is convenient for some dynamic programming solutions.</p>\n<p>It is also possible to iterate over all the subsets of a particular subset (represented by a bit pattern), provided that you don’t mind visiting them in reverse order (if this is problematic, put them in a list as they’re generated, then walk the list backwards). The trick is similar to that for finding the lowest bit in a number. If we subtract 1 from a subset, then the lowest set element is cleared, and every lower element is set. However, we only want to set those lower elements that are in the superset. So the iteration step is just i = (i - 1) &amp; superset.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\">    vector&lt;vector&lt;int&gt;&gt; vv;</span><br><span class=\"line\">    int size = nums.size(); </span><br><span class=\"line\">    if(size == 0) return vv;</span><br><span class=\"line\">    int num = 1 &lt;&lt; size;</span><br><span class=\"line\">    vv.resize(num);</span><br><span class=\"line\">    for(int i = 0; i &lt; num; ++i) &#123;</span><br><span class=\"line\">        for(int j = 0; j &lt; size; ++j)</span><br><span class=\"line\">            if((1&lt;&lt;j) &amp; i) vv[i].push_back(nums[j]);   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return vv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Actually there are two more methods to handle this using recursion and iteration respectively.</p>\n<h4 id=\"Bitset\"><a href=\"#Bitset\" class=\"headerlink\" title=\"Bitset\"></a>Bitset</h4><p>A bitset stores bits (elements with only two possible values: 0 or 1, true or false, …).<br>The class emulates an array of bool elements, but optimized for space allocation: generally, each element occupies only one bit (which, on most systems, is eight times less than the smallest elemental type: char).<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bitset::count</span><br><span class=\"line\">#include &lt;iostream&gt;       // std::cout</span><br><span class=\"line\">#include &lt;string&gt;         // std::string</span><br><span class=\"line\">#include &lt;bitset&gt;         // std::bitset</span><br><span class=\"line\"></span><br><span class=\"line\">int main () &#123;</span><br><span class=\"line\">  std::bitset&lt;8&gt; foo (std::string(&quot;10110011&quot;));</span><br><span class=\"line\">  std::cout &lt;&lt; foo &lt;&lt; &quot; has &quot;;</span><br><span class=\"line\">  std::cout &lt;&lt; foo.count() &lt;&lt; &quot; ones and &quot;;</span><br><span class=\"line\">  std::cout &lt;&lt; (foo.size()-foo.count()) &lt;&lt; &quot; zeros.\\n&quot;;</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Always welcom new ideas and practical tricks, just leave them in the comments!</p>\n"},{"title":"K-th problem","url":"http://trajepl.github.io/2017/06/18/K-th-problem/","content":"<p>This problem is well known and quite often can be found in various text books.</p>\n<p>You can take a couple of approaches to actually solve it:<br><a id=\"more\"></a></p>\n<h3 id=\"O-N-lg-N-running-time-O-1-memory\"><a href=\"#O-N-lg-N-running-time-O-1-memory\" class=\"headerlink\" title=\"O(N lg N) running time + O(1) memory\"></a>O(N lg N) running time + O(1) memory</h3><p>The simplest approach is to sort the entire input array and then access the element by it’s index (which is O(1)) operation:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = nums.length;</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[N - k];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"O-N-lg-K-running-time-O-K-memory\"><a href=\"#O-N-lg-K-running-time-O-K-memory\" class=\"headerlink\" title=\"O(N lg K) running time + O(K) memory\"></a>O(N lg K) running time + O(K) memory</h3><p>Other possibility is to use a min oriented priority queue that will store the K-th largest values. The algorithm iterates over the whole input and maintains the size of priority queue.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> PriorityQueue&lt;Integer&gt; pq = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> val : nums) &#123;</span><br><span class=\"line\">        pq.offer(val);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pq.size() &gt; k) &#123;</span><br><span class=\"line\">            pq.poll();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pq.peek();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"O-N-best-case-O-N-2-worst-case-running-time-O-1-memory\"><a href=\"#O-N-best-case-O-N-2-worst-case-running-time-O-1-memory\" class=\"headerlink\" title=\"O(N) best case / O(N^2) worst case running time + O(1) memory\"></a>O(N) best case / O(N^2) worst case running time + O(1) memory</h3><p>The smart approach for this problem is to use the selection algorithm (based on the partion method - the same one as used in quicksort).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    k = nums.length - k;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hi = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lo &lt; hi) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> j = partition(nums, lo, hi);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &lt; k) &#123;</span><br><span class=\"line\">            lo = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt; k) &#123;</span><br><span class=\"line\">            hi = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = lo;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = hi + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt; hi &amp;&amp; less(a[++i], a[lo]));</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &gt; lo &amp;&amp; less(a[lo], a[--j]));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt;= j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        exch(a, i, j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exch(a, lo, j);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> tmp = a[i];</span><br><span class=\"line\">    a[i] = a[j];</span><br><span class=\"line\">    a[j] = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v &lt; w;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"O-N-guaranteed-running-time-O-1-space\"><a href=\"#O-N-guaranteed-running-time-O-1-space\" class=\"headerlink\" title=\"O(N) guaranteed running time + O(1) space\"></a>O(N) guaranteed running time + O(1) space</h3><p>So how can we improve the above solution and make it O(N) guaranteed? The answer is quite simple, we can randomize the input, so that even when the worst case input would be provided the algorithm wouldn’t be affected. So all what it is needed to be done is to shuffle the input.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    shuffle(nums);</span><br><span class=\"line\">    k = nums.length - k;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hi = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lo &lt; hi) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> j = partition(nums, lo, hi);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &lt; k) &#123;</span><br><span class=\"line\">            lo = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt; k) &#123;</span><br><span class=\"line\">            hi = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(<span class=\"keyword\">int</span> a[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> ind = <span class=\"number\">1</span>; ind &lt; a.length; ind++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> r = random.nextInt(ind + <span class=\"number\">1</span>);</span><br><span class=\"line\">        exch(a, ind, r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>There is also worth mentioning the Blum-Floyd-Pratt-Rivest-Tarjan algorithm that has a guaranteed O(N) running time.</p>\n"},{"title":"SPARQL","url":"http://trajepl.github.io/2017/06/08/SPARQL/","content":"<h1 id=\"SPARQL\"><a href=\"#SPARQL\" class=\"headerlink\" title=\"SPARQL\"></a>SPARQL</h1><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h2 id=\"RDF-GRAPH\"><a href=\"#RDF-GRAPH\" class=\"headerlink\" title=\"RDF GRAPH\"></a>RDF GRAPH</h2><ul>\n<li><p><a href=\"https://www.w3.org/TR/rdf-syntax-grammar/\" target=\"_blank\" rel=\"external\">XML/RDF</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rdf:RDF</span>                                                                                                                                                                             </span><br><span class=\"line\">  <span class=\"attr\">xmlns:rdf</span>=<span class=\"string\">'http://www.w3.org/1999/02/22-rdf-syntax-ns#'</span></span><br><span class=\"line\">  <span class=\"attr\">xmlns:vCard</span>=<span class=\"string\">'http://www.w3.org/2001/vcard-rdf/3.0#'</span></span><br><span class=\"line\">  <span class=\"attr\">xmlns:info</span>=<span class=\"string\">'http://somewhere/peopleInfo#'</span></span><br><span class=\"line\">   &gt;</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">rdf:Description</span> <span class=\"attr\">rdf:about</span>=<span class=\"string\">\"http://somewhere/JohnSmith/\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vCard:FN</span>&gt;</span>John Smith<span class=\"tag\">&lt;/<span class=\"name\">vCard:FN</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">info:age</span> <span class=\"attr\">rdf:datatype</span>=<span class=\"string\">'http://www.w3.org/2001/XMLSchema#integer'</span>&gt;</span>25<span class=\"tag\">&lt;/<span class=\"name\">info:age</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vCard:N</span> <span class=\"attr\">rdf:parseType</span>=<span class=\"string\">\"Resource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vCard:Family</span>&gt;</span>Smith<span class=\"tag\">&lt;/<span class=\"name\">vCard:Family</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vCard:Given</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">vCard:Given</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">vCard:N</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">rdf:Description</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">rdf:RDF</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"http://www.ilrt.bris.ac.uk/discovery/2004/01/turtle/\" target=\"_blank\" rel=\"external\">TRUTLE</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@prefix vCard:   &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt; .</span><br><span class=\"line\">@prefix rdf:     &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .</span><br><span class=\"line\">@prefix :        &lt;#&gt; .</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;http://somewhere/MattJones/&gt;</span><br><span class=\"line\">    vCard:FN    &quot;Matt Jones&quot; ;</span><br><span class=\"line\">    vCard:N     [ vCard:Family</span><br><span class=\"line\">                              &quot;Jones&quot; ;</span><br><span class=\"line\">                  vCard:Given</span><br><span class=\"line\">                              &quot;Matthew&quot;</span><br><span class=\"line\">                ] .</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"http://www.w3.org/2000/10/swap/Primer\" target=\"_blank\" rel=\"external\">N3</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">like representation of turtle.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"SPARQL-QUERY\"><a href=\"#SPARQL-QUERY\" class=\"headerlink\" title=\"SPARQL QUERY\"></a>SPARQL QUERY</h2><h3 id=\"GRAPH-PATTERNS\"><a href=\"#GRAPH-PATTERNS\" class=\"headerlink\" title=\"GRAPH PATTERNS\"></a>GRAPH PATTERNS</h3><ul>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#BasicGraphPatterns\" target=\"_blank\" rel=\"external\">Basic Graph Patterns</a> : where a set of triple patterns must match<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#dataset</span><br><span class=\"line\">&lt;rdf:RDF                                                                                                                                                                                                            </span><br><span class=\"line\">  xmlns:rdf=&apos;http://www.w3.org/1999/02/22-rdf-syntax-ns#&apos;</span><br><span class=\"line\">  xmlns:vCard=&apos;http://www.w3.org/2001/vcard-rdf/3.0#&apos;</span><br><span class=\"line\">   &gt;   </span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/JohnSmith/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;John Smith&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;vCard:N rdf:parseType=&quot;Resource&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:Family&gt;Smith&lt;/vCard:Family&gt;</span><br><span class=\"line\">    &lt;vCard:Given&gt;John&lt;/vCard:Given&gt;</span><br><span class=\"line\">    &lt;/vCard:N&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/RebeccaSmith/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;Becky Smith&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;vCard:N rdf:parseType=&quot;Resource&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:Family&gt;Smith&lt;/vCard:Family&gt;</span><br><span class=\"line\">    &lt;vCard:Given&gt;Rebecca&lt;/vCard:Given&gt;</span><br><span class=\"line\">    &lt;/vCard:N&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/SarahJones/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;Sarah Jones&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;vCard:N rdf:parseType=&quot;Resource&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:Family&gt;Jones&lt;/vCard:Family&gt;</span><br><span class=\"line\">    &lt;vCard:Given&gt;Sarah&lt;/vCard:Given&gt;</span><br><span class=\"line\">    &lt;/vCard:N&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/MattJones/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;Matt Jones&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;vCard:N</span><br><span class=\"line\">    vCard:Family=&quot;Jones&quot;</span><br><span class=\"line\">    vCard:Given=&quot;Matthew&quot;/&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/rdf:RDF&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># basic graph pattern</span><br><span class=\"line\">SELECT ?givenName</span><br><span class=\"line\">WHERE &#123; </span><br><span class=\"line\">    ?y  &lt;http://www.w3.org/2001/vcard-rdf/3.0#Family&gt;  &quot;Smith&quot; .</span><br><span class=\"line\">    ?y  &lt;http://www.w3.org/2001/vcard-rdf/3.0#Given&gt;  ?givenName .</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    # same as </span><br><span class=\"line\">PREFIX vcard: &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;</span><br><span class=\"line\">SELECT ?givenName</span><br><span class=\"line\">WHERE &#123; </span><br><span class=\"line\">    ?y  vcard:Family  &quot;Smith&quot;;</span><br><span class=\"line\">        vcard:Given  ?givenName .</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># result</span><br><span class=\"line\">-------------</span><br><span class=\"line\">| givenName |</span><br><span class=\"line\">=============</span><br><span class=\"line\">| &quot;John&quot;    |</span><br><span class=\"line\">| &quot;Rebecca&quot; |</span><br><span class=\"line\">-------------</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># blank node</span><br><span class=\"line\">PREFIX vcard:      &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT ?y ?givenName</span><br><span class=\"line\">WHERE</span><br><span class=\"line\"> &#123; ?y vcard:Family &quot;Smith&quot; .</span><br><span class=\"line\">   ?y vcard:Given  ?givenName .</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> # result</span><br><span class=\"line\"> --------------------</span><br><span class=\"line\">| y    | givenName |</span><br><span class=\"line\">====================</span><br><span class=\"line\">| _:b0 | &quot;John&quot;    |</span><br><span class=\"line\">| _:b1 | &quot;Rebecca&quot; |</span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># note that: Syntax for Blank Nodes</span><br><span class=\"line\">[ :p &quot;v&quot; ] .  ||  _:a0 :p &quot;v&quot; .  # blank node </span><br><span class=\"line\">[] :p &quot;v&quot; .   # as subject </span><br><span class=\"line\">:s :q [ :p &quot;v&quot; ] . # as object</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># FILTER</span><br><span class=\"line\">PREFIX vcard: &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT ?g</span><br><span class=\"line\">WHERE&#123; </span><br><span class=\"line\">    ?y vcard:Given ?g .</span><br><span class=\"line\">    FILTER regex(?g, &quot;r&quot;, &quot;i&quot;) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#result</span><br><span class=\"line\">-------------</span><br><span class=\"line\">| g         |</span><br><span class=\"line\">=============</span><br><span class=\"line\">| &quot;Rebecca&quot; |</span><br><span class=\"line\">| &quot;Sarah&quot;   |</span><br><span class=\"line\">-------------</span><br></pre></td></tr></table></figure>\n<p>More example use <a href=\"https://www.w3.org/TR/rdf-sparql-query/#SparqlOps\" target=\"_blank\" rel=\"external\">FILTER.</a></p>\n<ul>\n<li><p><a href=\"https://www.w3.org/TR/rdf-sparql-query/#GroupPatterns\" target=\"_blank\" rel=\"external\">Group Graph Pattern</a> : where a set of graph patterns must all match</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># a group graph pattern is delimited with &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#125;  # empty graph pattern </span><br><span class=\"line\">PREFIX vcard:      &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT ?y ?givenName</span><br><span class=\"line\">WHERE &#123; </span><br><span class=\"line\">    &#123;?y vcard:Family &quot;Smith&quot; .&#125;</span><br><span class=\"line\">    &#123;?y vcard:Given  ?givenName .&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"># Result same as previous query.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://www.w3.org/TR/rdf-sparql-query/#optionals\" target=\"_blank\" rel=\"external\">Optional Graph patterns</a> : where additional patterns may extend the solution</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># dataset</span><br><span class=\"line\">&lt;rdf:RDF                                                                                                                                                                                                            </span><br><span class=\"line\">  xmlns:rdf=&apos;http://www.w3.org/1999/02/22-rdf-syntax-ns#&apos;</span><br><span class=\"line\">  xmlns:vCard=&apos;http://www.w3.org/2001/vcard-rdf/3.0#&apos;</span><br><span class=\"line\">  xmlns:info=&apos;http://somewhere/peopleInfo#&apos;</span><br><span class=\"line\">   &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/JohnSmith/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;John Smith&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;info:age rdf:datatype=&apos;http://www.w3.org/2001/XMLSchema#integer&apos;&gt;25&lt;/info:age&gt;</span><br><span class=\"line\">    &lt;vCard:N rdf:parseType=&quot;Resource&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:Family&gt;Smith&lt;/vCard:Family&gt;</span><br><span class=\"line\">    &lt;vCard:Given&gt;John&lt;/vCard:Given&gt;</span><br><span class=\"line\">    &lt;/vCard:N&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/RebeccaSmith/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;Becky Smith&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;info:age rdf:datatype=&apos;http://www.w3.org/2001/XMLSchema#integer&apos;&gt;23&lt;/info:age&gt;</span><br><span class=\"line\">    &lt;vCard:N rdf:parseType=&quot;Resource&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:Family&gt;Smith&lt;/vCard:Family&gt;</span><br><span class=\"line\">    &lt;vCard:Given&gt;Rebecca&lt;/vCard:Given&gt;</span><br><span class=\"line\">    &lt;/vCard:N&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/SarahJones/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;Sarah Jones&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;vCard:N rdf:parseType=&quot;Resource&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:Family&gt;Jones&lt;/vCard:Family&gt;</span><br><span class=\"line\">    &lt;vCard:Given&gt;Sarah&lt;/vCard:Given&gt;</span><br><span class=\"line\">    &lt;/vCard:N&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/MattJones/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;Matt Jones&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;vCard:N</span><br><span class=\"line\">    vCard:Family=&quot;Jones&quot;</span><br><span class=\"line\">    vCard:Given=&quot;Matthew&quot;/&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/rdf:RDF&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># OPTIONAL</span><br><span class=\"line\">PREFIX info:        &lt;http://somewhere/peopleInfo#&gt;</span><br><span class=\"line\">PREFIX vcard:      &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT ?name ?age</span><br><span class=\"line\">WHERE &#123;</span><br><span class=\"line\">    ?person vcard:FN  ?name .</span><br><span class=\"line\">    OPTIONAL &#123; ?person info:age ?age . FILTER ( ?age &gt; 24 ) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># result</span><br><span class=\"line\">-----------------------</span><br><span class=\"line\">| name          | age |</span><br><span class=\"line\">=======================</span><br><span class=\"line\">| &quot;Becky Smith&quot; |     |</span><br><span class=\"line\">| &quot;Sarah Jones&quot; |     |</span><br><span class=\"line\">| &quot;John Smith&quot;  | 25  |</span><br><span class=\"line\">| &quot;Matt Jones&quot;  |     |</span><br><span class=\"line\">-----------------------</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#alternatives\" target=\"_blank\" rel=\"external\">Alternative Graph Pattern</a> : where two or more possible patterns are tried<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#dataset </span><br><span class=\"line\">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .</span><br><span class=\"line\">@prefix vcard: &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt; .</span><br><span class=\"line\"></span><br><span class=\"line\">_:a foaf:name   &quot;Matt Jones&quot; .</span><br><span class=\"line\"></span><br><span class=\"line\">_:b foaf:name   &quot;Sarah Jones&quot; .</span><br><span class=\"line\"></span><br><span class=\"line\">_:c vcard:FN    &quot;Becky Smith&quot; .</span><br><span class=\"line\"></span><br><span class=\"line\">_:d vcard:FN    &quot;John Smith&quot; .</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># UNION</span><br><span class=\"line\">PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;</span><br><span class=\"line\">PREFIX vCard: &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT ?name1 ?name2</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   &#123; [] foaf:name ?name1 &#125; UNION &#123; [] vCard:FN ?name2 &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># result</span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">| name1         | name2         |</span><br><span class=\"line\">=================================</span><br><span class=\"line\">| &quot;Matt Jones&quot;  |               |</span><br><span class=\"line\">| &quot;Sarah Jones&quot; |               |</span><br><span class=\"line\">|               | &quot;Becky Smith&quot; |</span><br><span class=\"line\">|               | &quot;John Smith&quot;  |</span><br><span class=\"line\">---------------------------------</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#queryDataset\" target=\"_blank\" rel=\"external\">Patterns on Named Graphs</a>, where patterns are matched against named graphs<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Default graph (ds-dft.ttl):</span><br><span class=\"line\">@prefix dc: &lt;http://purl.org/dc/elements/1.1/&gt; .</span><br><span class=\"line\">@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ds-ng-1.ttl&gt; dc:date &quot;2005-07-14T03:18:56+0100&quot;^^xsd:dateTime .</span><br><span class=\"line\">&lt;ds-ng-2.ttl&gt; dc:date &quot;2005-09-22T05:53:05+0100&quot;^^xsd:dateTime .</span><br><span class=\"line\"></span><br><span class=\"line\"># Named graph (ds-ng-1.ttl):</span><br><span class=\"line\">@prefix dc: &lt;http://purl.org/dc/elements/1.1/&gt; .</span><br><span class=\"line\"></span><br><span class=\"line\">[] dc:title &quot;Harry Potter and the Philospher&apos;s Stone&quot; .</span><br><span class=\"line\">[] dc:title &quot;Harry Potter and the Chamber of Secrets&quot; .</span><br><span class=\"line\"></span><br><span class=\"line\">#Named graph (ds-ng-2.ttl):</span><br><span class=\"line\">@prefix dc: &lt;http://purl.org/dc/elements/1.1/&gt; .</span><br><span class=\"line\"></span><br><span class=\"line\">[] dc:title &quot;Harry Potter and the Sorcerer&apos;s Stone&quot; .</span><br><span class=\"line\">[] dc:title &quot;Harry Potter and the Chamber of Secrets&quot; .</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># query</span><br><span class=\"line\">PREFIX  xsd:    &lt;http://www.w3.org/2001/XMLSchema#&gt;</span><br><span class=\"line\">PREFIX  dc:     &lt;http://purl.org/dc/elements/1.1/&gt;</span><br><span class=\"line\">PREFIX  :       &lt;.&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT ?date ?title</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ?g dc:date ?date . FILTER (?date &gt; &quot;2005-08-01T00:00:00Z&quot;^^xsd:dateTime )</span><br><span class=\"line\">  GRAPH ?g</span><br><span class=\"line\">      &#123; ?b dc:title ?title &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># result</span><br><span class=\"line\">-----------------------------------------------------------------------------------------</span><br><span class=\"line\">| date                                      | title                                     |</span><br><span class=\"line\">=========================================================================================</span><br><span class=\"line\">| &quot;2005-09-22T05:53:05+01:00&quot;^^xsd:dateTime | &quot;Harry Potter and the Sorcerer&apos;s Stone&quot;   |</span><br><span class=\"line\">| &quot;2005-09-22T05:53:05+01:00&quot;^^xsd:dateTime | &quot;Harry Potter and the Chamber of Secrets&quot; |</span><br><span class=\"line\">-----------------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># specific graph </span><br><span class=\"line\">PREFIX dc: &lt;http://purl.org/dc/elements/1.1/&gt;</span><br><span class=\"line\">PREFIX : &lt;.&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT ?title</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  GRAPH :ds-ng-2.ttl</span><br><span class=\"line\">    &#123; ?b dc:title ?title &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># result</span><br><span class=\"line\">---------------------------------------------</span><br><span class=\"line\">| title                                     |</span><br><span class=\"line\">=============================================</span><br><span class=\"line\">| &quot;Harry Potter and the Sorcerer&apos;s Stone&quot;   |</span><br><span class=\"line\">| &quot;Harry Potter and the Chamber of Secrets&quot; |</span><br><span class=\"line\">---------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># note that: </span><br><span class=\"line\">GRAPH &lt;IRI&gt; &#123; ... pattern ... &#125;</span><br><span class=\"line\">GRAPH VAR &#123; ... pattern ... &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># FROM NAMED</span><br><span class=\"line\">PREFIX xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;</span><br><span class=\"line\">PREFIX dc:  &lt;http://purl.org/dc/elements/1.1/&gt;</span><br><span class=\"line\">PREFIX :    &lt;.&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM       &lt;ds-dft.ttl&gt;</span><br><span class=\"line\">FROM NAMED &lt;ds-ng-1.ttl&gt;</span><br><span class=\"line\">FROM NAMED &lt;ds-ng-2.ttl&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   &#123; ?s ?p ?o &#125; UNION &#123; GRAPH ?g &#123; ?s ?p ?o &#125; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Producing-Result-Sets\"><a href=\"#Producing-Result-Sets\" class=\"headerlink\" title=\"Producing Result Sets\"></a>Producing Result Sets</h3><h4 id=\"SPARQL-has-four-result-forms\"><a href=\"#SPARQL-has-four-result-forms\" class=\"headerlink\" title=\"SPARQL has four result forms:\"></a>SPARQL has four result forms:</h4><ul>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#select\" target=\"_blank\" rel=\"external\">SELECT</a> – Return a table of results.</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#construct\" target=\"_blank\" rel=\"external\">CONSTRUCT</a> – Return an RDF graph, based on a template in the query.</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#describe\" target=\"_blank\" rel=\"external\">DESCRIBE</a> – Return an RDF graph, based on what the query processor is configured to return.</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#ask\" target=\"_blank\" rel=\"external\">ASK</a> – Ask a boolean query.</li>\n</ul>\n<h4 id=\"Pattern-matching-produces-a-set-of-solutions-This-set-can-be-modified-in-various-ways\"><a href=\"#Pattern-matching-produces-a-set-of-solutions-This-set-can-be-modified-in-various-ways\" class=\"headerlink\" title=\"Pattern matching produces a set of solutions. This set can be modified in various ways:\"></a>Pattern matching produces a set of solutions. This set can be modified in various ways:</h4><ul>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#defn_algOrdered\" target=\"_blank\" rel=\"external\">Order By</a> modifier: put the solutions in order</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#defn_algProjection\" target=\"_blank\" rel=\"external\">Projection</a> modifier: choose certain variables</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#defn_algDistinct\" target=\"_blank\" rel=\"external\">Distinct</a> modifier: ensure solutions in the sequence are unique</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#defn_algReduced\" target=\"_blank\" rel=\"external\">Reduced</a> modifier: permit any non-unique solutions to be eliminated</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#defn_algOffset\" target=\"_blank\" rel=\"external\">Offset</a> modifier: control where the solutions start from in the overall sequence of solutions</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#defn_algLimit\" target=\"_blank\" rel=\"external\">Limit</a> modifier: restrict the number of solutions</li>\n</ul>\n"},{"title":"Install Laravel","url":"http://trajepl.github.io/2017/06/08/laravel/","content":"<p>Larabel框架的安装方法主要有两类:</p>\n<blockquote>\n<ol>\n<li>Laravel Homestead: 此种情况的安装简单的说就是模拟一个虚拟机出来, 方便的进行apache php的安装配置.因此不需要单独对apache php的安装配置.</li>\n<li>Composer: 通过PHP-composer进行安装. Firstly, 要知道composer是php的一个依赖管理工具.当在写项目的时候,你可以用过composer对所需要的第三方依赖代码库进行下载安装. 因此这种情况下, 我们想在项目中使用laravel框架, 便通过composer来安装.</li>\n</ol>\n</blockquote>\n<p>For learning: 我们展开叙述第二种情况:(每种情况的安装都先阐述通用安装,最后介绍在arch-linux下的安装)<br><a id=\"more\"></a></p>\n<h2 id=\"Composer-Install\"><a href=\"#Composer-Install\" class=\"headerlink\" title=\"Composer Install\"></a>Composer Install</h2><p>[Composer Home Page][1] (每次打开网页composer的衣服颜色都发生改变.)</p>\n<p><em>运行安装的时候应该注意: 执行以下四行代码完毕,会在当前目目录创建一个 .composer的目录(隐藏目录) 而且会遗留下一个composer.phar文件, 执行composer.phar就可以执行composer</em><br><em>第三行代码仅仅是简单的将composer安装到当前目录下,并生成 .composer/ &amp; composer.phar. 可以用下一行代码代替第三行的代码从而指定composer安装的dirName和最后生成的composer(代替composer.phar)<br><code>php composer-setup.php --install-dir=dirName --filename=composer</code></em></p>\n<ol>\n<li>Run this in you terminal to get the latest Composer version:<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ php -r <span class=\"string\">\"copy('https://getcomposer.org/installer', 'composer-setup.php');\"</span></span><br><span class=\"line\">$ php -r <span class=\"string\">\"if (hash_file('SHA384', 'composer-setup.php') === '92102166af5abdb03f49ce52a40591073a7b859a86e8ff13338cf7db58a19f7844fbc0bb79b2773bf30791e935dbd938') &#123; echo 'Installer verified'; &#125; else &#123; echo 'Installer corrupt'; unlink('composer-setup.php'); &#125; echo PHP_EOL;\"</span></span><br><span class=\"line\">$ php composer-setup.php</span><br><span class=\"line\">$ php -r <span class=\"string\">\"unlink('composer-setup.php');\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>前三步下载安装了composer 最后一步删除了composer-setup.php</p>\n<p>以上步骤安装号之后便完成了对composer的局部安装(只能在当前安装目录下运行composer). 全局安装只需把生成的composer.phar文件(如果上一步–filename换名就用改掉后的名字)拷贝到 /user/bin/目录下.<br>终端代码:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mv composer.phar /usr/<span class=\"built_in\">local</span>/bin/composer</span><br></pre></td></tr></table></figure></p>\n<p><strong>%composer 安装测试</strong><br>转到工程文件目录, 执行<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ composer</span><br></pre></td></tr></table></figure></p>\n<p>如果出错,多半是类似如下错误:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ErrorException]                                                                                      </span><br><span class=\"line\">  is_file(): open_basedir restriction <span class=\"keyword\">in</span> effect. File(./composer.json) is not within the allowed path(  </span><br><span class=\"line\">  s): (/srv/http/:/home/:/tmp/:/usr/share/pear/:/srv/:/usr/share/webapps/:/etc/webapps:/usr/bin/compos  </span><br><span class=\"line\">  er:/home/ljp/.composer/composer.json:/root/.composer/:/usr/bin/php:/dev/tty)</span><br></pre></td></tr></table></figure></p>\n<p>即: 某某目录或者文件不在php.ini 中允许的目录里, 解决方案: 打开php.ini 添加目录进去:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/php/php.ini</span><br><span class=\"line\">$ open_basedir = /srv/http/:/home/:/tmp/:/usr/share/pear/:/srv/:/usr/share/webapps/:/etc/webapps:/usr/     bin/composer:/home/ljp/.composer/composer.json:/root/.composer/:/usr/bin/php:/dev/tty</span><br></pre></td></tr></table></figure></p>\n<p><strong>%至此composer安装完成!</strong><br><em>arch 下安装命令    so easy :)</em><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacmam -S php-composer</span><br></pre></td></tr></table></figure></p>\n<p>##Laravel Install<br>1 . 在composer安装目录下执行:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ composer global require <span class=\"string\">\"laravel/installer\"</span></span><br></pre></td></tr></table></figure></p>\n<p>安装后目录结构如下:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ljp@LJP .composer]$ ls</span><br><span class=\"line\">cacert.pem  composer.json  composer.lock  keys.dev.pub  keys.tags.pub  vendor</span><br></pre></td></tr></table></figure></p>\n<p>2 . 在相应工程目录文件中执行如下指令:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ laravel new blog</span><br></pre></td></tr></table></figure></p>\n<p>这个时候就会自动下载文件到当前工作blog(名字随意)目录下.</p>\n<p>3 . laravel测试及问题解决:</p>\n<blockquote>\n<p>因为使用框架的时候肯定会对当前目录进行修改,随意要确保storage/ bootstrap/cache/ 文件具有写权限制:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;$ chome -R 777 storage/ bootstrap/cache/</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>-R表示对目录下文件也执行777操作.</p>\n<p>如果是用 apache+php 搭建的环境: 在浏览器中测试的时候会产生 serve:500的错误(内置服务器错误).<br>解决方法如下:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/httpd/conf/http.conf</span><br></pre></td></tr></table></figure></p>\n<p>找到rewite模块 把注释去掉<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器中测试成功.</p>\n"},{"title":"CCF-A of DB&&DM","url":"http://trajepl.github.io/2017/05/16/CCF-A-of-DB-DM/","content":"<h1 id=\"The-famous-conferences-or-journals-of-DB-and-DM\"><a href=\"#The-famous-conferences-or-journals-of-DB-and-DM\" class=\"headerlink\" title=\"The famous conferences or journals of DB and DM\"></a>The famous conferences or journals of DB and DM</h1><a id=\"more\"></a>\n<h2 id=\"Database\"><a href=\"#Database\" class=\"headerlink\" title=\"Database\"></a>Database</h2><ul>\n<li><a href=\"http://dblp.uni-trier.de/db/conf/sigmod/\" target=\"_blank\" rel=\"external\">ACM SIGMOD Conference</a></li>\n<li><a href=\"http://dblp.uni-trier.de/db/conf/icde/\" target=\"_blank\" rel=\"external\">International Conference on Data Engineering (ICDE)</a></li>\n<li><a href=\"http://dblp.uni-trier.de/db/conf/vldb/\" target=\"_blank\" rel=\"external\">Very Large Data Bases (VLDB) Conference</a></li>\n</ul>\n<h2 id=\"Data-Mining\"><a href=\"#Data-Mining\" class=\"headerlink\" title=\"Data Mining\"></a>Data Mining</h2><ul>\n<li><a href=\"http://dblp.uni-trier.de/db/conf/kdd/\" target=\"_blank\" rel=\"external\">Knowledge Discovery and Data Mining (KDD)</a></li>\n<li><a href=\"http://dblp.uni-trier.de/db/journals/sigkdd/\" target=\"_blank\" rel=\"external\">ACM Special Interest Group on Knowledge Discovery and Data Mining (SIGKDD)</a></li>\n<li><a href=\"http://dblp.uni-trier.de/db/conf/incdm/\" target=\"_blank\" rel=\"external\">Industrial Conference on Data Mining (ICDM)</a></li>\n</ul>\n"},{"title":"Base64","url":"http://trajepl.github.io/2016/10/18/Base64/","content":"<h1 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h1><p>C and Java implements for Base64 encode and decode<br><a id=\"more\"></a></p>\n<h2 id=\"Unsigned-short-int-转换为二进制字符串\"><a href=\"#Unsigned-short-int-转换为二进制字符串\" class=\"headerlink\" title=\"Unsigned short int 转换为二进制字符串\"></a>Unsigned short int 转换为二进制字符串</h2><p>c语言中unsigned short 的数值范围是 0~65535<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">binary_print</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> v, <span class=\"keyword\">char</span> *src)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = <span class=\"keyword\">sizeof</span>(v) * <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> bit = v &amp; (<span class=\"number\">1</span> &lt;&lt; (size - i - <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bit == <span class=\"number\">0</span>) src[i]=<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t \t<span class=\"keyword\">else</span> src[i] =<span class=\"string\">'1'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tsrc[<span class=\"number\">16</span>] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实验结果展示： </p>\n<p><img src=\"https://github.com/trajepl/ljp/blob/master/pic/binary_show.png?raw=true\" alt=\"show\"></p>\n<p>通过实验，显示当输入范围不在0~65535之间的时候，转换过程结束。main函数中部分调用如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// convert to binary output.</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"-----Binary convert-----\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> v;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> flag;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> src_bit[<span class=\"number\">17</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Input a unsigned short int(end with number &lt; 0):\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;flag);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(flag &gt;= <span class=\"number\">0</span> &amp;&amp; flag &lt;= <span class=\"number\">65535</span>) &#123;</span><br><span class=\"line\">\t\tv = flag;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(v &lt; <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    binary_print(v, src_bit);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Binary char: \"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(src_bit);</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;flag);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Base64的简单实现\"><a href=\"#Base64的简单实现\" class=\"headerlink\" title=\"Base64的简单实现\"></a>Base64的简单实现</h2><p>Base64是网络上一种常见的交换码。既然是交换码，就符合交换码的主要思想：在数据通过网络传输之前对之进行编码，使之符合网络传递的要求，在接收到编码过得数据后对之进行解码，从而恢复数据。<br>Base64是如今互联网应用最多的一种编码，大多数的电子邮件软件都把它作为默认的编码方式。</p>\n<h3 id=\"编码原理：\"><a href=\"#编码原理：\" class=\"headerlink\" title=\"编码原理：\"></a>编码原理：</h3><p>编码的时候，将三个byte的数据，先后放入一个24bit的缓冲区中，先来的byte占高位。数据不足3byte的话，于缓冲区中剩下的bit用0补足。然后，每次取出6个bit，按照其值选择[a-zA-Z0-9+/]中的字符作为编码后的输出。不断进行，直到全部输入数据转换完成。</p>\n<p>如果最后剩下两个输入数据，在编码结果后加1个“=”；如果最后剩下一个输入数据，编码结果后加2个“=”；如果没有剩下任何数据，就什么都不要加，这样才可以保证资料还原的正确性。</p>\n<p>编码后的数据比原始数据略长，为原来的4/3。无论什么样的字符都会全部被编码</p>\n<p>编码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Base64Encode</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *src, <span class=\"keyword\">char</span> *des)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t <span class=\"keyword\">while</span>(*(src + len) != <span class=\"string\">'\\0'</span>) len++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(*src == <span class=\"string\">'\\0'</span> || len &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *p = src;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *p_end = src + len;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p_end - p &gt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t*des ++ = base64_index[p[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t*des ++ = base64_index[((p[<span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x30</span>) | (p[<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">4</span>)];</span><br><span class=\"line\">\t\t*des ++ = base64_index[((p[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x3C</span>) | (p[<span class=\"number\">2</span>] &gt;&gt; <span class=\"number\">6</span>)];</span><br><span class=\"line\">\t\t*des ++ = base64_index[p[<span class=\"number\">2</span>] &amp; <span class=\"number\">0x3F</span>];</span><br><span class=\"line\">\t\tp += <span class=\"number\">3</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p_end - p &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t*des++ = base64_index[p[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((p_end - p) == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t*des ++ = base64_index[( (p[<span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x30</span> ) | ( p[<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">4</span> )];  </span><br><span class=\"line\">\t\t\t*des ++ = base64_index[(p[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x3C</span>]; </span><br><span class=\"line\">         \t*des++ = <span class=\"string\">'='</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p_end - p == <span class=\"number\">1</span>) &#123;  </span><br><span class=\"line\">\t        *des++ = base64_index[(p[<span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x30</span>];  </span><br><span class=\"line\">\t        *des++ = <span class=\"string\">'='</span>;  </span><br><span class=\"line\">        \t*des++ = <span class=\"string\">'='</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*des =<span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解码原理\"><a href=\"#解码原理\" class=\"headerlink\" title=\"解码原理\"></a>解码原理</h3><p>解码作为编码的逆过程，就显得比较简单了， 分析原先的编码过程，很容易得出最后的解码过程，代码实现如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">base64_decode_map</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(base64_index[i++] != <span class=\"string\">'\\0'</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(base64_index[i<span class=\"number\">-1</span>] == c) <span class=\"keyword\">return</span> i<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Base64Decode</span><span class=\"params\">(<span class=\"keyword\">char</span> *src, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* des)</span> </span>&#123;</span><br><span class=\"line\">\t*des = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(src);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(len % <span class=\"number\">4</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *p = src;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *p_end = src + len;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(; p &lt; p_end; p+=<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">\t\t*des ++ = ( (base64_decode_map(p[<span class=\"number\">0</span>]) &lt;&lt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0xFC</span> ) | ( (base64_decode_map(p[<span class=\"number\">1</span>]) &gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x03</span> );</span><br><span class=\"line\">\t\t*des ++ = ( (base64_decode_map(p[<span class=\"number\">1</span>]) &lt;&lt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0xF0</span> ) | ( (base64_decode_map(p[<span class=\"number\">2</span>]) &gt;&gt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x0F</span> );</span><br><span class=\"line\">\t\t*des ++ = ( (base64_decode_map(p[<span class=\"number\">2</span>]) &lt;&lt; <span class=\"number\">6</span>) &amp; <span class=\"number\">0xC0</span> ) | ( base64_decode_map(p[<span class=\"number\">3</span>]));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( *(src + len - <span class=\"number\">2</span>) == <span class=\"string\">'='</span> ) </span><br><span class=\"line\">\t\t*(des - <span class=\"number\">2</span>) = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( *(src + len - <span class=\"number\">1</span>) == <span class=\"string\">'='</span>)</span><br><span class=\"line\">\t\t*(des - <span class=\"number\">1</span>) = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"结果展示：\"><a href=\"#结果展示：\" class=\"headerlink\" title=\"结果展示：\"></a>结果展示：</h3><p><img src=\"https://github.com/trajepl/ljp/blob/master/pic/decodeEncode.png?raw=true\" alt=\"decode\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>完整代码地址：<a href=\"https://github.com/trajepl/Base64\" target=\"_blank\" rel=\"external\">Base64</a><br>对Base64的简单实现。对于文件，图片，音频，视频等的实现的传输，Base64也发挥很大最用。随后补上Java的文件编码实现。</p>\n"},{"title":"Hello World","url":"http://trajepl.github.io/2016/05/01/hello-world/","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"about","url":"http://trajepl.github.io/about/index.html","content":""},{"title":"category","url":"http://trajepl.github.io/category/index.html","content":""},{"title":"link","url":"http://trajepl.github.io/link/index.html","content":""},{"title":"project","url":"http://trajepl.github.io/project/index.html","content":""},{"title":"search","url":"http://trajepl.github.io/search/index.html","content":""},{"title":"tag","url":"http://trajepl.github.io/tag/index.html","content":""},{"title":"tags","url":"http://trajepl.github.io/tags/index.html","content":""},{"title":"[object Object]","url":"http://trajepl.github.io/categories/index.html","content":""}]