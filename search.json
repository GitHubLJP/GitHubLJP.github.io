[{"title":"An insight into Graph Attention Network with Source Code","url":"http://trajepl.github.io/2019/11/12/An-insight-into-Graph-Attention-Network-with-Source-Code/","content":"<h1 id=\"An-insight-into-Graph-Attention-Network-with-Source-Code\"><a href=\"#An-insight-into-Graph-Attention-Network-with-Source-Code\" class=\"headerlink\" title=\"An insight into Graph Attention Network with Source Code\"></a>An insight into Graph Attention Network with Source Code</h1><h2 id=\"What-is-attention-Details\"><a href=\"#What-is-attention-Details\" class=\"headerlink\" title=\"What is attention? Details\"></a>What is attention? <a href=\"https://mp.weixin.qq.com/s/uLkhJ6eYbuy_fHXu5jt0sg\" target=\"_blank\" rel=\"external\">Details</a></h2><p>经典的Attention模型,主要从下面三个部分了解:</p>\n<ol>\n<li><p>Score function: 邻居向量(也称Key)与当前输入向量(也称Query)之间的相似性度量方法:</p>\n<ul>\n<li>向量在同一空间的时候,可以使用向量点乘:<ul>\n<li>$e_{ij} = h_i * h_j$</li>\n</ul>\n</li>\n<li>Key Query过简单的神经网络学习权重, 不同的任务中采用不同的激活函数<ul>\n<li>$e_{ij} = a(W \\vec h_i, U \\vec h_j)$<blockquote>\n<p>$e_{ij} = LeakyRelu(\\vec a^T[W \\vec h_i || U \\vec h_j])$ 是graph attention network(GAT)中使用的score function</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Alignment function: 计算attention weight, 通常都使用Softmax归一化:</p>\n<ul>\n<li>$\\alpha<em>{ij} = Softmax(e</em>{ij}) = \\frac{exp(e<em>{ij})}{\\sum</em>{k\\in N<em>i}exp(e</em>{ik})}$ </li>\n</ul>\n</li>\n<li>Generate context vector function: 根据attention weight得到输出向量:<ul>\n<li>$z_i = \\sum<em>k{\\alpha</em>{ij} * h_k}$</li>\n</ul>\n</li>\n</ol>\n<p>接下来,按照这部分中定义的Attention三个部分,我们通过源码解析GAT的实现</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>以GAT中<a href=\"https://github.com/Diego999/pyGAT/tree/master/data/cora\" target=\"_blank\" rel=\"external\">Cora</a>数据为例, 在Cora数据中,主要处理了两部分输入:</p>\n<blockquote>\n<pre><code>1. 属性关系: 节点feature vector\n    &lt;Paper_id&gt; &lt;Word_attributes&gt; &lt;class_label&gt;\n2. 拓扑结构: 节点之间引用关系构成的图\n    &lt;ID_of_cited_paper&gt; &lt;ID_of_citing_paper&gt;\n</code></pre></blockquote>\n<p>这里数据文件的读取放在<a href=\"https://github.com/Diego999/pyGAT/blob/e6a8fa50a01202588c2d3980356d7df216f69957/utils.py#L13\" target=\"_blank\" rel=\"external\">utils.py</a>中:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_data</span><span class=\"params\">(path: str = <span class=\"string\">'./data/cora'</span>, dataset=<span class=\"string\">'cora'</span>)</span> -&gt; List[torch.Tensor]:</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  adj,        <span class=\"comment\"># FloatTensor 邻接矩阵 [num_nodes, num_nodes]</span></span><br><span class=\"line\">            features,   <span class=\"comment\"># FloatTensor 节点特征向量 [num_nodes, num_features]</span></span><br><span class=\"line\">            labels,     <span class=\"comment\"># LongTensor 节点分类信息 [num_nodes, 1]</span></span><br><span class=\"line\">            idx_train,  <span class=\"comment\"># LongTensor</span></span><br><span class=\"line\">            idx_val,    <span class=\"comment\"># LongTensor</span></span><br><span class=\"line\">            idx_test    <span class=\"comment\"># LongTensor</span></span><br></pre></td></tr></table></figure>\n<p>Note that:</p>\n<blockquote>\n<p>在存储邻接稀疏矩阵的时候, 采用了csr_matrix的方式去存储稀疏矩阵. scipy.sparse中有七种不同的sparse matrix的存储方式, 具体见<a href=\"https://docs.scipy.org/doc/scipy/reference/sparse.html\" target=\"_blank\" rel=\"external\">Details</a>.</p>\n</blockquote>\n<h2 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h2><p><img src=\"https://camo.githubusercontent.com/4381475b2a8cf1bf6213e4dcddf89f87ba8422fc/687474703a2f2f7777772e636c2e63616d2e61632e756b2f7e70763237332f696d616765732f6761742e6a7067\" alt=\"1\"></p>\n<p>具体的模型介绍可见论文<code>Graph Attention Network</code>, 我们这里主要根据源码来学习GAT的实现:</p>\n<h3 id=\"Graph-Attention-Layer\"><a href=\"#Graph-Attention-Layer\" class=\"headerlink\" title=\"Graph Attention Layer:\"></a><a href=\"https://github.com/Diego999/pyGAT/blob/e6a8fa50a01202588c2d3980356d7df216f69957/layers.py#L7\" target=\"_blank\" rel=\"external\">Graph Attention Layer</a>:</h3><p>Attention Layer主要实现了上图中$\\vec\\alpha_{ij}$的计算, 计算过程按照第一部分中的三个步骤依次是:</p>\n<ol>\n<li>Score function: $e_{ij} = LeakyRelu(\\vec a^T[W \\vec h_i || U \\vec h_j])$</li>\n<li>Alignment function: $\\alpha<em>{ij} = Softmax(e</em>{ij}) = \\frac{exp(e<em>{ij})}{\\sum</em>{k\\in N<em>i}exp(e</em>{ik})}$ </li>\n<li>Generate context vector function: 根据attention weight得到输出向量: $z_i = \\sum<em>k{\\alpha</em>{ij} * h_k}$</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GraphAttentionLayer</span><span class=\"params\">(nn.Module)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self ...)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># W: [in_features, out_features]</span></span><br><span class=\"line\">        self.W = nn.Parameter(torch.zeros(size=(in_features, out_features)))</span><br><span class=\"line\">        nn.init.xavier_uniform_(self.W.data, gain=<span class=\"number\">1.414</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 2 * out_features, 1</span></span><br><span class=\"line\">        self.a = nn.Parameter(torch.zeros(size=(<span class=\"number\">2</span>*out_features, <span class=\"number\">1</span>)))</span><br><span class=\"line\">        nn.init.xavier_uniform_(self.a.data, gain=<span class=\"number\">1.414</span>)</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, input: torch.Tensor, adj: torch.Tensor)</span> -&gt; torch.Tensor:</span></span><br><span class=\"line\">        <span class=\"comment\"># input: [num_nodes, in_features] node features</span></span><br><span class=\"line\">        <span class=\"comment\"># adj: 邻接矩阵 [num_nodes, num_nodes]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># h_i * W =&gt; [N, out_features]</span></span><br><span class=\"line\">        h = torch.mm(input, self.W)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># number of nodes</span></span><br><span class=\"line\">        N = h.size()[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'''</span><br><span class=\"line\">        维度变化依次是:</span><br><span class=\"line\">        1. h.repeat(1, N).view(N * N, -1)</span><br><span class=\"line\">            [N, out_features] =&gt; [N, out_features * N] =&gt; [N * N, out_features]</span><br><span class=\"line\">        2. torch.cat([h.repeat(1, N).view(N * N, -1), h.repeat(N, 1)], dim=1)</span><br><span class=\"line\">            [N * N, out_features] + [N * N, out_features] =&gt; [N * N, 2 * out_features]</span><br><span class=\"line\">        3. .....view(N, -1, 2 * self.out_features)</span><br><span class=\"line\">            [N * N, 2 * out_features] =&gt; [N, N, 2 * features]</span><br><span class=\"line\">        由此实现了拼接的功能</span><br><span class=\"line\">        '''</span></span><br><span class=\"line\">        a_input = torch.cat([h.repeat(<span class=\"number\">1</span>, N).view(N * N, <span class=\"number\">-1</span>), h.repeat(N, <span class=\"number\">1</span>)], dim=<span class=\"number\">1</span>).view(N, <span class=\"number\">-1</span>, <span class=\"number\">2</span> * self.out_features)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'''</span><br><span class=\"line\">        [N, N, 2 * features] * [2 * out_features, 1] =&gt; [N, N, 1] =&gt; [N, N]</span><br><span class=\"line\">        即:在 N*N 方阵中, 对于一个节点, 计算了该节点与其他所有节点的相似度 =&gt; socre fucnton (setp 1)</span><br><span class=\"line\">        '''</span></span><br><span class=\"line\">        e = self.leakyrelu(torch.matmul(a_input, self.a).squeeze(<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        zero_vec = <span class=\"number\">-9e15</span>*torch.ones_like(e)</span><br><span class=\"line\">        <span class=\"comment\"># 取有边相连的节点的相似度, 无边相连置0(-9e15)</span></span><br><span class=\"line\">        attention = torch.where(adj &gt; <span class=\"number\">0</span>, e, zero_vec)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># (step 2)</span></span><br><span class=\"line\">        attention = F.softmax(attention, dim=<span class=\"number\">1</span>)</span><br><span class=\"line\">        attention = F.dropout(attention, self.dropout, training=self.training)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># (step 3)</span></span><br><span class=\"line\">        h_prime = torch.matmul(attention, h)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.concat:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> F.elu(h_prime)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> h_prime</span><br></pre></td></tr></table></figure>\n<h3 id=\"GAT-Model\"><a href=\"#GAT-Model\" class=\"headerlink\" title=\"GAT Model\"></a><a href=\"https://github.com/Diego999/pyGAT/blob/e6a8fa50a01202588c2d3980356d7df216f69957/models.py#L7\" target=\"_blank\" rel=\"external\">GAT Model</a></h3><p>GAT Model利用两层的Attention layer来实现:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GAT</span><span class=\"params\">(nn.Module)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, nfeat, nhid, nclass, dropout, alpha, nheads)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Dense version of GAT.\"\"\"</span></span><br><span class=\"line\">        super(GAT, self).__init__()</span><br><span class=\"line\">        self.dropout = dropout</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># multi-head: nheads</span></span><br><span class=\"line\">        self.attentions = [GraphAttentionLayer(nfeat, nhid, dropout=dropout, alpha=alpha, concat=<span class=\"keyword\">True</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(nheads)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, attention <span class=\"keyword\">in</span> enumerate(self.attentions):</span><br><span class=\"line\">            self.add_module(<span class=\"string\">'attention_&#123;&#125;'</span>.format(i), attention)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 输出层再过一个GraphAttentionLayer, 输出分类结果, 此时模型concat 设为False, 输出层调用elu激活函数</span></span><br><span class=\"line\">        self.out_att = GraphAttentionLayer(nhid * nheads, nclass, dropout=dropout, alpha=alpha, concat=<span class=\"keyword\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, x, adj)</span>:</span></span><br><span class=\"line\">        x = F.dropout(x, self.dropout, training=self.training)</span><br><span class=\"line\">        <span class=\"comment\"># multi-head结果的拼接</span></span><br><span class=\"line\">        x = torch.cat([att(x, adj) <span class=\"keyword\">for</span> att <span class=\"keyword\">in</span> self.attentions], dim=<span class=\"number\">1</span>)</span><br><span class=\"line\">        x = F.dropout(x, self.dropout, training=self.training)</span><br><span class=\"line\">        x = F.elu(self.out_att(x, adj))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> F.log_softmax(x, dim=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></p>\n<p><code>forward</code>最后<code>log_softmax</code>,具体见<a href=\"https://blog.csdn.net/lanchunhui/article/details/51248184\" target=\"_blank\" rel=\"external\">Details</a>.</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>&gt;<br>    在数值计算（或者任何其他工程领域）里，知道一个东西的基本算法和写出一个能在实际中工作得很好的程序之间还是有一段不小的距离的。有很多可能看似无关紧要的小细节小 trick，可能会对结果带来很大的不同。当然这样的现象其实也很合理：因为理论上的工作之所以漂亮正是因为抓住了事物的主要矛盾，忽略“无关”的细节进行了简化和抽象，从而对比较“干净”的对象进行操作，在一系列的“assumption”下建立起理论体系。但是当要将理论应用到实践中的时候，又得将这些之前被忽略掉了的细节全部加回去，得到一团乱糟糟，在一系列的“assumption”都不再严格满足的条件下找出会出现哪些问题并通过一些所谓的“engineering trick”来让原来的理论能“大致地”继续有效，这些东西大概就主要是 Engineer 们所需要处理的事情了吧？这样说来 Engineer 其实也相当不容易。这样的话其实 Engineer 和 Scientist 的界线就又模糊了，就是工作在不同的抽象程度下的区别的样子。<br>引自: <a href=\"http://freemind.pluskid.org/machine-learning/softmax-vs-softmax-loss-numerical-stability/\" target=\"_blank\" rel=\"external\">pluskid</a></p>\n"},{"title":"机器学习绪论以模型选择和评估","url":"http://trajepl.github.io/2017/09/24/机器学习绪论以模型选择和评估/","content":"<h2 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h2><ul>\n<li>学习：假设用P来评估计算机程序在某任务类T上的性能，若一个程序通过利用经验E在T中任务上获得了性能改善，则我们就说关于T和P，该程序对E进行了学习</li>\n<li>样本空间 特征向量 etc. <img src=\"https://raw.githubusercontent.com/trajepl/ljp/master/pic/Screenshot%20from%202017-09-24%2010-59-32.png\" alt=\"Sample\"></li>\n<li>假设空间和版本空间：版本空间是假设空间的一个子集。<ul>\n<li>假设空间基于训练集中所有特征的随机组合。</li>\n<li>版本空间则只基于由训练集数据所有导出特征组合，即版本空间中的所有假设均要满足训练集数据的特征。</li>\n</ul>\n</li>\n<li>归纳偏好(inductive bias): 机器学习算法在学习过程中对某种类型假设的偏好。</li>\n<li>奥卡姆剃刀(Occam’s razor): 若有多哥假设与观察一致，则选择最简单的那个。</li>\n<li>NFL(No Free Lunch Theorem):<ul>\n<li>前提：所有问题出现的机会相同，或者所有问题同等重要</li>\n<li>以上前提下：训练产生的学习算法或适用当前问题，或不适用，他们的期望值总是相同的。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"模型选择和评估\"><a href=\"#模型选择和评估\" class=\"headerlink\" title=\"模型选择和评估\"></a>模型选择和评估</h2><h3 id=\"经验误差与过拟合\"><a href=\"#经验误差与过拟合\" class=\"headerlink\" title=\"经验误差与过拟合\"></a>经验误差与过拟合</h3><ul>\n<li>经验误差: 学习器在训练集上的误差。</li>\n<li>泛化误差: 学习器在新样本上的误差。</li>\n<li>过拟合: 对训练样本的一般特征甚至潜在特征都加以了考虑，导致泛化能力下降。(P = NP 时，过拟合可避免)</li>\n<li>欠拟合：对训练样本的一般特征都没有”学习“好。<h3 id=\"评估方法\"><a href=\"#评估方法\" class=\"headerlink\" title=\"评估方法\"></a>评估方法</h3></li>\n<li>留出法(hold-out)：将数据集D划分为两个互斥的集合分别作为训练集和测试集，同时保持数据特征在两个数据集中分布相似。</li>\n<li>交叉验证法(cross validation)：将数据集合D划分为个大小相似的互斥子集。每次训练k-1个作为训练集，剩余的一个子集作为测试集。当D中包含m个样本时, k = m则得到交叉验证法的一个特例：留一法(常用，但是复杂度高)。同时值得注意的是，实际训练中，往往要多次利用不同的划分方法对D进行划分，然后重新交叉验证(如:10。同时值得注意的是，实际训练中，往往要多次利用不同的划分方法对D进行划分，然后重新交叉验证(如10次10折交叉验证)。</li>\n<li>自助法(bootstrapping)：当数据量小，难以有效划分训练集/测试集时，往往采用自助法。每次从数据集D中取出一个放入新的数据集D1(copy), 这样，D中一部分样本会在D1中出现多次，但是有的样本则不会出现再D1中，有36.8%的数据不会再D1中出现。</li>\n</ul>\n<h3 id=\"性能度量\"><a href=\"#性能度量\" class=\"headerlink\" title=\"性能度量\"></a>性能度量</h3><p>学习模型的度量不仅取决于算法和数据，还决定于任务需求。(模型的‘好坏’是相对的)</p>\n<ul>\n<li>查准，查全，F-measure： F-measure是precision和recall的调和平均。=&gt; P-R图 平衡点</li>\n<li>ROC， AUC：<ul>\n<li>ROC：<ol>\n<li>x-axis 假正例率：实际为假，却被学习器预测为真的例子，在实际假例中占的比率。</li>\n<li>y-axis 真正例率：实际为真，而被学习器预测为真的例子，在实际真例中占的比率。</li>\n</ol>\n</li>\n<li>AUC: 可对ROC曲线下各部分求面积而得。考虑的时样本预测的排序质量。</li>\n</ul>\n</li>\n<li>代价敏感错误率与代价曲线：不同类型的错误造成的后果不同，因此要衡量学习器犯错时的代价量。</li>\n</ul>\n<h3 id=\"比较检验\"><a href=\"#比较检验\" class=\"headerlink\" title=\"比较检验(!)\"></a>比较检验(!)</h3><ul>\n<li>评估单学习器<ul>\n<li>二项式检验：对错误率小于定值定值a这样的假设进行检验</li>\n<li>t检验： 错误率都集中分布在某个定值周围的检验手段</li>\n</ul>\n</li>\n<li>用于比较两个学习器优劣的方法<ul>\n<li>交叉验证t检验</li>\n</ul>\n</li>\n<li>多个算法进行比较的方法<ul>\n<li>Friedman检验</li>\n<li>Nemenyi后续检验</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Hourse Robber III","url":"http://trajepl.github.io/2017/08/02/Hourse-Robber-III/","content":"<h2 id=\"Step-I-–-Think-naively\"><a href=\"#Step-I-–-Think-naively\" class=\"headerlink\" title=\"Step I – Think naively\"></a>Step I – Think naively</h2><p>At first glance, the problem exhibits the feature of “optimal substructure”: if we want to rob maximum amount of money from current binary tree (rooted at root), we surely hope that we can do the same to its left and right subtrees.</p>\n<p>So going along this line, let’s define the function rob(root) which will return the maximum amount of money that we can rob for the binary tree rooted at root; the key now is to construct the solution to the original problem from solutions to its subproblems, i.e., how to get rob(root) from rob(root.left), rob(root.right), … etc.<br><a id=\"more\"></a><br>Apparently the analyses above suggest a recursive solution. And for recursion, it’s always worthwhile figuring out the following two properties:</p>\n<p>Termination condition: when do we know the answer to rob(root) without any calculation? Of course when the tree is empty – we’ve got nothing to rob so the amount of money is zero.</p>\n<p>Recurrence relation: i.e., how to get rob(root) from rob(root.left), rob(root.right), … etc. From the point of view of the tree root, there are only two scenarios at the end: root is robbed or is not. If it is, due to the constraint that “we cannot rob any two directly-linked houses”, the next level of subtrees that are available would be the four “grandchild-subtrees” (root.left.left, root.left.right, root.right.left, root.right.right). However if root is not robbed, the next level of available subtrees would just be the two “child-subtrees” (root.left, root.right). We only need to choose the scenario which yields the larger amount of money.</p>\n<p>Here is the program for the ideas above:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rob</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        val += rob(root.left.left) + rob(root.left.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        val += rob(root.right.left) + rob(root.right.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(val + root.val, rob(root.left) + rob(root.right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>However the solution runs very slowly (1186 ms) and barely got accepted.</p>\n<h2 id=\"Step-II-–-Think-one-step-further\"><a href=\"#Step-II-–-Think-one-step-further\" class=\"headerlink\" title=\"Step II – Think one step further\"></a>Step II – Think one step further</h2><p>In step I, we only considered the aspect of “optimal substructure”, but think little about the possibilities of overlapping of the subproblems. For example, to obtain rob(root), we need rob(root.left), rob(root.right), rob(root.left.left), rob(root.left.right), rob(root.right.left), rob(root.right.right); but to get rob(root.left), we also need rob(root.left.left), rob(root.left.right), similarly for rob(root.right). The naive solution above computed these subproblems repeatedly, which resulted in bad time performance. Now if you recall the two conditions for dynamic programming: “optimal substructure” + “overlapping of subproblems”, we actually have a DP problem. A naive way to implement DP here is to use a hash map to record the results for visited subtrees.</p>\n<p>And here is the improved solution:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rob</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> robSub(root, <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">robSub</span><span class=\"params\">(TreeNode root, Map&lt;TreeNode, Integer&gt; map)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map.containsKey(root)) <span class=\"keyword\">return</span> map.get(root);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        val += robSub(root.left.left, map) + robSub(root.left.right, map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        val += robSub(root.right.left, map) + robSub(root.right.right, map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    val = Math.max(val + root.val, robSub(root.left, map) + robSub(root.right, map));</span><br><span class=\"line\">    map.put(root, val);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The runtime is sharply reduced to 9 ms, at the expense of O(n) space cost (n is the total number of nodes; stack cost for recursion is not counted).</p>\n<h3 id=\"Step-III-–-Think-one-step-back\"><a href=\"#Step-III-–-Think-one-step-back\" class=\"headerlink\" title=\"Step III – Think one step back\"></a>Step III – Think one step back</h3><p>In step I, we defined our problem as rob(root), which will yield the maximum amount of money that can be robbed of the binary tree rooted at root. This leads to the DP problem summarized in step II.</p>\n<p>Now let’s take one step back and ask why we have overlapping subproblems. If you trace all the way back to the beginning, you’ll find the answer lies in the way how we have defined rob(root). As I mentioned, for each tree root, there are two scenarios: it is robbed or is not. rob(root) does not distinguish between these two cases, so “information is lost as the recursion goes deeper and deeper”, which results in repeated subproblems.</p>\n<p>If we were able to maintain the information about the two scenarios for each tree root, let’s see how it plays out. Redefine rob(root) as a new function which will return an array of two elements, the first element of which denotes the maximum amount of money that can be robbed if root is not robbed, while the second element signifies the maximum amount of money robbed if it is robbed.</p>\n<p>Let’s relate rob(root) to rob(root.left) and rob(root.right)…, etc. For the 1st element of rob(root), we only need to sum up the larger elements of rob(root.left) and rob(root.right), respectively, since root is not robbed and we are free to rob its left and right subtrees. For the 2nd element of rob(root), however, we only need to add up the 1st elements of rob(root.left) and rob(root.right), respectively, plus the value robbed from root itself, since in this case it’s guaranteed that we cannot rob the nodes of root.left and root.right.</p>\n<p>As you can see, by keeping track of the information of both scenarios, we decoupled the subproblems and the solution essentially boiled down to a greedy one. Here is the program:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rob</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = robSub(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(res[<span class=\"number\">0</span>], res[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] robSub(TreeNode root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] left = robSub(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] right = robSub(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    res[<span class=\"number\">0</span>] = Math.max(left[<span class=\"number\">0</span>], left[<span class=\"number\">1</span>]) + Math.max(right[<span class=\"number\">0</span>], right[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    res[<span class=\"number\">1</span>] = root.val + left[<span class=\"number\">0</span>] + right[<span class=\"number\">0</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"KG-fudan","url":"http://trajepl.github.io/2017/07/14/KG-fudan-md/","content":"<p><strong>知识图谱：起源于<em>人工智能(AI</em>) 中的<em>知识工程(KE)</em>，为了更好的进行<em>知识表示(KR)</em>，进而提出了可以很好地表示知识的一种方式，即KG. 因此客观的讲，知识图谱只是知识表示的一种有优势的形式，通过这种形式，可以跟好的促进机器对知识的存储和认知。</strong></p>\n<p>知识有结构化 &amp; 非结构化的表示，结构化比如<em>Sematic Web</em>，<em>ontolgoy</em>等，非结构化的比如网络上的文档等，介于两者之间还有诸如wiki，百度百科等的半结构化的数据。这些数据的表示中，Knowledge graph有很大优势，</p>\n<ul>\n<li>large scale</li>\n<li>semantically rich</li>\n<li>high quality</li>\n<li>friendly structure</li>\n</ul>\n<p>基于这些优势，在计算机领域中，<em>search, recommendation, Q-A</em>便可以很好的利用知识图谱的优势来增进其研究。对于我们研究者来讲，之前研究中遇到的效率低或者准确率低的问题，我们是否可以利用KG来优化，或者之前无法很好解决的问题，我们是否可以利用KG来逐步求解等。<br><a id=\"more\"></a></p>\n<h3 id=\"Search\"><a href=\"#Search\" class=\"headerlink\" title=\"Search\"></a>Search</h3><ol>\n<li>category-based</li>\n<li>IR-based(keyword, vertor-space, boolean-model)</li>\n<li>link-based(pagerank)  </li>\n<li>user-based(KG)<ul>\n<li>understank the search intent of users</li>\n<li>directly return pure answers instead of revevant web pages</li>\n<li>provide plentiful/relevant results with high confidence/interpretability<h3 id=\"Recommendation\"><a href=\"#Recommendation\" class=\"headerlink\" title=\"Recommendation\"></a>Recommendation</h3></li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>Collaborative Filtering based</li>\n<li>Content-based</li>\n<li>Hybrid</li>\n<li>KG-based<ul>\n<li>Understand and characterize users and items more comprehensively</li>\n<li>Uncover the semantic/latent relationships between users and items other than the user-item interactions</li>\n<li>Uncover the semantic/latent relationships between the features of users/items</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list of paper(fudan)</span><br><span class=\"line\">[1] Yi Zhang, Yanghua Xiao, Seung-won Hwang, Haixun Wang, X. Sean Wang, Wei Wang: Entity</span><br><span class=\"line\">Suggestion with Conceptual Explanation, in IJCAI 2017.</span><br><span class=\"line\">[2] Yi Zhang, Yanghua Xiao et al.: Long Concept Query using Conceptual Taxonomies, under reviewing.</span><br><span class=\"line\">[3] Deqing Yang, Jingrui He, Huazheng Qin, Yanghua Xiao, Wei Wang: A Graph-based</span><br><span class=\"line\">Recommendation across Heterogeneous Domains, in CIKM 2015.</span><br><span class=\"line\">[4] Deqing Yang, Yanghua Xiao, Yangqiu Song, Wei Wang: Semantic-based Recommendation Across</span><br><span class=\"line\">Heterogeneous Domains, in ICDM 2015.</span><br><span class=\"line\">[5] Deqing Yang, Yanghua Xiao, Yangqiu Song, Junjun Zhang, Kezun Zhang, Wei Wang: Tag propagation</span><br><span class=\"line\">based recommendation across diverse social media, in WWW 2014.</span><br><span class=\"line\">[6] Fuzheng Zhang, Nicholas Jing Yuan, Defu Lian, Xing Xie, Wei-Ying Ma: Collaborative Knowledge</span><br><span class=\"line\">Base Embedding for Recommender Systems, in KDD 2016</span><br></pre></td></tr></table></figure>\n<h3 id=\"Q-A-system\"><a href=\"#Q-A-system\" class=\"headerlink\" title=\"Q-A system\"></a>Q-A system</h3><p>三种表现形式：</p>\n<ul>\n<li>text-based</li>\n<li>KG-based</li>\n<li>FAQ<br>两种实现方法：</li>\n<li><p>template|rule-based</p>\n<ul>\n<li>Represent sentences by templates</li>\n<li><p>By human labeling</p>\n</li>\n<li><p>PROs:</p>\n<ul>\n<li>User-controllable</li>\n<li>Applicable to industry use</li>\n</ul>\n</li>\n<li>CONs:<ul>\n<li>Relies on manpower. Too costly.</li>\n<li>Cannot handle the diversity of questions.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>DL|ML-based: uncontrolled<ul>\n<li>Represent sentences by embeddings</li>\n<li>By learning from corpus</li>\n<li>PROs:<ul>\n<li>Feasible to understand diverse questions</li>\n</ul>\n</li>\n<li>CONs:<ul>\n<li>Poor interpretability</li>\n<li>Not controllable. Unfriendly to industrial application.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Bit Manipulation","url":"http://trajepl.github.io/2017/07/02/Bit-Manipulation/","content":"<h1 id=\"Bit-Manipulation\"><a href=\"#Bit-Manipulation\" class=\"headerlink\" title=\"Bit Manipulation\"></a>Bit Manipulation</h1><hr>\n<p>Bit manipulation is the act of algorithmically manipulating bits or other pieces of data shorter than a word. Computer programming tasks that require bit manipulation include low-level device control, error detection and correction algorithms, data compression, encryption algorithms, and optimization. For most other tasks, modern programming languages allow the programmer to work directly with abstractions instead of bits that represent those abstractions. Source code that does bit manipulation makes use of the bitwise operations: AND, OR, XOR, NOT, and bit shifts.</p>\n<p>Bit manipulation, in some cases, can obviate or reduce the need to loop over a data structure and can give many-fold speed ups, as bit manipulations are processed in parallel, but the code can become more difficult to write and maintain.<br><a id=\"more\"></a></p>\n<h2 id=\"Details\"><a href=\"#Details\" class=\"headerlink\" title=\"Details\"></a>Details</h2><h3 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a>Basics</h3><p>At the heart of bit manipulation are the bit-wise operators &amp; (and), | (or), ~ (not) and ^ (exclusive-or, xor) and shift operators a &lt;&lt; b and a &gt;&gt; b.</p>\n<p>There is no boolean operator counterpart to bitwise exclusive-or, but there is a simple explanation. The exclusive-or operation takes two inputs and returns a 1 if either one or the other of the inputs is a 1, but not if both are. That is, if both inputs are 1 or both inputs are 0, it returns 0. Bitwise exclusive-or, with the operator of a caret, ^, performs the exclusive-or operation on each pair of bits. Exclusive-or is commonly abbreviated XOR.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set union A | B</span><br><span class=\"line\">Set intersection A &amp; B</span><br><span class=\"line\">Set subtraction A &amp; ~B</span><br><span class=\"line\">Set negation ALL_BITS ^ A or ~A</span><br><span class=\"line\">Set bit A |= 1 &lt;&lt; bit</span><br><span class=\"line\">Clear bit A &amp;= ~(1 &lt;&lt; bit)</span><br><span class=\"line\">Test bit (A &amp; 1 &lt;&lt; bit) != 0</span><br><span class=\"line\">Extract last bit A&amp;-A or A&amp;~(A-1) or x^(x&amp;(x-1))</span><br><span class=\"line\">Remove last bit A&amp;(A-1)</span><br><span class=\"line\">Get all 1-bits ~0</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><p>Count the number of ones in the binary representation of the given number<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">count_one</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">        n = n&amp;(n<span class=\"number\">-1</span>);</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Is power of four (actually map-checking, iterative and recursive methods can do the same)<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isPowerOfFour</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(n&amp;(n<span class=\"number\">-1</span>)) &amp;&amp; (n&amp;<span class=\"number\">0x55555555</span>);</span><br><span class=\"line\">    <span class=\"comment\">//check the 1-bit location;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"tricks\"><a href=\"#tricks\" class=\"headerlink\" title=\"^ tricks\"></a>^ tricks</h4><p>Use ^ to remove even exactly same numbers and save the odd, or save the distinct bits and remove the same.</p>\n<p>Sum of Two Integers<br>Use ^ and &amp; to add two integers<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getSum</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b==<span class=\"number\">0</span>? a:getSum(a^b, (a&amp;b)&lt;&lt;<span class=\"number\">1</span>); <span class=\"comment\">//be careful about the terminating condition;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Missing Number</p>\n<p>Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array. For example, Given nums = [0, 1, 3] return 2. (Of course, you can do this by math.)<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">missingNumber</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class=\"line\">        ret ^= i;</span><br><span class=\"line\">        ret ^= nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret^=nums.size();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"tricks-1\"><a href=\"#tricks-1\" class=\"headerlink\" title=\"| tricks\"></a>| tricks</h4><p>Keep as many 1-bits as possible</p>\n<p>Find the largest power of 2 (most significant bit in binary form), which is less than or equal to the given number N.<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">largest_power</span><span class=\"params\">(<span class=\"keyword\">long</span> N)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//changing all right side bits to 1.</span></span><br><span class=\"line\">    N = N | (N&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    N = N | (N&gt;&gt;<span class=\"number\">2</span>);</span><br><span class=\"line\">    N = N | (N&gt;&gt;<span class=\"number\">4</span>);</span><br><span class=\"line\">    N = N | (N&gt;&gt;<span class=\"number\">8</span>);</span><br><span class=\"line\">    N = N | (N&gt;&gt;<span class=\"number\">16</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (N+<span class=\"number\">1</span>)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Reverse Bits</p>\n<p>Reverse bits of a given 32 bits unsigned integer.</p>\n<p>Solution<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">uint32_t</span> reverseBits(<span class=\"keyword\">uint32_t</span> n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> mask = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">31</span>, res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) res |= mask;</span><br><span class=\"line\">        mask &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">uint32_t</span> reverseBits(<span class=\"keyword\">uint32_t</span> n) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">uint32_t</span> mask = <span class=\"number\">1</span>, ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; ++i)&#123;</span><br><span class=\"line\">\t\tret &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mask &amp; n) ret |= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tmask &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"amp-tricks\"><a href=\"#amp-tricks\" class=\"headerlink\" title=\"&amp; tricks\"></a>&amp; tricks</h4><p>Just selecting certain bits</p>\n<p>Reversing the bits in integer<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = ((x &amp; <span class=\"number\">0xaaaaaaaa</span>) &gt;&gt; <span class=\"number\">1</span>) | ((x &amp; <span class=\"number\">0x55555555</span>) &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">x = ((x &amp; <span class=\"number\">0xcccccccc</span>) &gt;&gt; <span class=\"number\">2</span>) | ((x &amp; <span class=\"number\">0x33333333</span>) &lt;&lt; <span class=\"number\">2</span>);</span><br><span class=\"line\">x = ((x &amp; <span class=\"number\">0xf0f0f0f0</span>) &gt;&gt; <span class=\"number\">4</span>) | ((x &amp; <span class=\"number\">0x0f0f0f0f</span>) &lt;&lt; <span class=\"number\">4</span>);</span><br><span class=\"line\">x = ((x &amp; <span class=\"number\">0xff00ff00</span>) &gt;&gt; <span class=\"number\">8</span>) | ((x &amp; <span class=\"number\">0x00ff00ff</span>) &lt;&lt; <span class=\"number\">8</span>);</span><br><span class=\"line\">x = ((x &amp; <span class=\"number\">0xffff0000</span>) &gt;&gt; <span class=\"number\">16</span>) | ((x &amp; <span class=\"number\">0x0000ffff</span>) &lt;&lt; <span class=\"number\">16</span>);</span><br></pre></td></tr></table></figure></p>\n<p>Bitwise AND of Numbers Range</p>\n<p>Given a range [m, n] where 0 &lt;= m &lt;= n &lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive. For example, given the range [5, 7], you should return 4.</p>\n<p>Solution<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rangeBitwiseAnd</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m != n) &#123;</span><br><span class=\"line\">        m &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        a++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m&lt;&lt;a; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Number of 1 Bits</p>\n<p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).</p>\n<p>Solution<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hammingWeight</span><span class=\"params\">(uint32_t n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">\t\tn = n&amp;(n<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hammingWeight</span><span class=\"params\">(uint32_t n)</span> </span>&#123;</span><br><span class=\"line\">    ulong mask = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; ++i)&#123; <span class=\"comment\">//31 will not do, delicate;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mask &amp; n) count++;</span><br><span class=\"line\">        mask &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h4><p>Repeated DNA Sequences</p>\n<p>All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: “ACGAATTCCG”. When studying DNA, it is sometimes useful to identify repeated sequences within the DNA. Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.<br>For example,<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given s = <span class=\"string\">\"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"</span>,</span><br><span class=\"line\">Return: [<span class=\"string\">\"AAAAACCCCC\"</span>, <span class=\"string\">\"CCCCCAAAAA\"</span>].</span><br></pre></td></tr></table></figure></p>\n<p>Solution<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; findRepeatedDnaSequences(<span class=\"built_in\">string</span> s) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sLen = s.length();</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sLen &lt; <span class=\"number\">11</span>) <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> keyMap[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">21</span>]&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hashKey = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; ++i) hashKey = (hashKey&lt;&lt;<span class=\"number\">2</span>) | (s[i]-<span class=\"string\">'A'</span>+<span class=\"number\">1</span>)%<span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">9</span>; i &lt; sLen; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(keyMap[hashKey = ((hashKey&lt;&lt;<span class=\"number\">2</span>)|(s[i]-<span class=\"string\">'A'</span>+<span class=\"number\">1</span>)%<span class=\"number\">5</span>)&amp;<span class=\"number\">0xfffff</span>]++ == <span class=\"number\">1</span>)</span><br><span class=\"line\">                v.push_back(s.substr(i<span class=\"number\">-9</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>But the above solution can be invalid when repeated sequence appears too many times, in which case we should use unordered_map<int, int=\"\"> keyMap to replace char keyMap[1&lt;&lt;21]{0}here.<br>Majority Element</int,></p>\n<p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times. (bit-counting as a usual way, but here we actually also can adopt sorting and Moore Voting Algorithm)</p>\n<p>Solution<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">majorityElement</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*<span class=\"number\">8</span>, size = nums.size();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>, mask = <span class=\"number\">1</span>, ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">        count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; size; ++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mask &amp; nums[j]) count++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; size/<span class=\"number\">2</span>) ret |= mask;</span><br><span class=\"line\">        mask &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Single Number III</p>\n<p>Given an array of integers, every element appears three times except for one. Find that single one. (Still this type can be solved by bit-counting easily.) But we are going to solve it by digital logic design</p>\n<p>Solution<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//inspired by logical circuit design and boolean algebra;</span></span><br><span class=\"line\"><span class=\"comment\">//counter - unit of 3;</span></span><br><span class=\"line\"><span class=\"comment\">//current   incoming  next</span></span><br><span class=\"line\"><span class=\"comment\">//a b            c    a b</span></span><br><span class=\"line\"><span class=\"comment\">//0 0            0    0 0</span></span><br><span class=\"line\"><span class=\"comment\">//0 1            0    0 1</span></span><br><span class=\"line\"><span class=\"comment\">//1 0            0    1 0</span></span><br><span class=\"line\"><span class=\"comment\">//0 0            1    0 1</span></span><br><span class=\"line\"><span class=\"comment\">//0 1            1    1 0</span></span><br><span class=\"line\"><span class=\"comment\">//1 0            1    0 0</span></span><br><span class=\"line\"><span class=\"comment\">//a = a&amp;~b&amp;~c + ~a&amp;b&amp;c;</span></span><br><span class=\"line\"><span class=\"comment\">//b = ~a&amp;b&amp;~c + ~a&amp;~b&amp;c;</span></span><br><span class=\"line\"><span class=\"comment\">//return a|b since the single number can appear once or twice;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t = <span class=\"number\">0</span>, a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class=\"line\">        t = (a&amp;~b&amp;~nums[i]) | (~a&amp;b&amp;nums[i]);</span><br><span class=\"line\">        b = (~a&amp;b&amp;~nums[i]) | (~a&amp;~b&amp;nums[i]);</span><br><span class=\"line\">        a = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a | b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Maximum Product of Word Lengths</p>\n<p>Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1:</span><br><span class=\"line\">Given [<span class=\"string\">\"abcw\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"xtfn\"</span>, <span class=\"string\">\"abcdef\"</span>]</span><br><span class=\"line\">Return 16</span><br><span class=\"line\">The two words can be <span class=\"string\">\"abcw\"</span>, <span class=\"string\">\"xtfn\"</span>.</span><br><span class=\"line\">Example 2:</span><br><span class=\"line\">Given [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"ab\"</span>, <span class=\"string\">\"abc\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"cd\"</span>, <span class=\"string\">\"bcd\"</span>, <span class=\"string\">\"abcd\"</span>]</span><br><span class=\"line\">Return 4</span><br><span class=\"line\">The two words can be <span class=\"string\">\"ab\"</span>, <span class=\"string\">\"cd\"</span>.</span><br><span class=\"line\">Example 3:</span><br><span class=\"line\">Given [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"aa\"</span>, <span class=\"string\">\"aaa\"</span>, <span class=\"string\">\"aaaa\"</span>]</span><br><span class=\"line\">Return 0</span><br><span class=\"line\">No such pair of words.</span><br></pre></td></tr></table></figure></p>\n<p>Solution</p>\n<p>Since we are going to use the length of the word very frequently and we are to compare the letters of two words checking whether they have some letters in common:</p>\n<p>using an array of int to pre-store the length of each word reducing the frequently measuring process;<br>since int has 4 bytes, a 32-bit type, and there are only 26 different letters, so we can just use one bit to indicate the existence of the letter in a word.<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProduct</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; words)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; mask(words.size());</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; lens(words.size());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; words.size(); ++i) lens[i] = words[i].length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;words.size(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : words[i])</span><br><span class=\"line\">            mask[i] |= <span class=\"number\">1</span> &lt;&lt; (c - <span class=\"string\">'a'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;i; ++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(mask[i] &amp; mask[j]))</span><br><span class=\"line\">                result = max(result, lens[i]*lens[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Attention</strong></p>\n<p>result after shifting left(or right) too much is undefined<br>right shifting operations on negative values are undefined<br>right operand in shifting should be non-negative, otherwise the result is undefined<br>The &amp; and | operators have lower precedence than comparison operators<br>Sets<br>All the subsets<br>A big advantage of bit manipulation is that it is trivial to iterate over all the subsets of an N-element set: every N-bit value represents some subset. Even better, if A is a subset of B then the number representing A is less than that representing B, which is convenient for some dynamic programming solutions.</p>\n<p>It is also possible to iterate over all the subsets of a particular subset (represented by a bit pattern), provided that you don’t mind visiting them in reverse order (if this is problematic, put them in a list as they’re generated, then walk the list backwards). The trick is similar to that for finding the lowest bit in a number. If we subtract 1 from a subset, then the lowest set element is cleared, and every lower element is set. However, we only want to set those lower elements that are in the superset. So the iteration step is just i = (i - 1) &amp; superset.<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; subsets(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; vv;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = nums.size(); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> vv;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">1</span> &lt;&lt; size;</span><br><span class=\"line\">    vv.resize(num);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; num; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; size; ++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((<span class=\"number\">1</span>&lt;&lt;j) &amp; i) vv[i].push_back(nums[j]);   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Actually there are two more methods to handle this using recursion and iteration respectively.</p>\n<h4 id=\"Bitset\"><a href=\"#Bitset\" class=\"headerlink\" title=\"Bitset\"></a>Bitset</h4><p>A bitset stores bits (elements with only two possible values: 0 or 1, true or false, …).<br>The class emulates an array of bool elements, but optimized for space allocation: generally, each element occupies only one bit (which, on most systems, is eight times less than the smallest elemental type: char).<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bitset::count</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span>       // std::cout</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span>         // std::string</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span>         // std::bitset</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">bitset</span>&lt;8&gt; foo (<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>(<span class=\"string\">\"10110011\"</span>));</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; foo &lt;&lt; <span class=\"string\">\" has \"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; foo.count() &lt;&lt; <span class=\"string\">\" ones and \"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; (foo.size()-foo.count()) &lt;&lt; <span class=\"string\">\" zeros.\\n\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Always welcom new ideas and practical tricks, just leave them in the comments!</p>\n"},{"title":"K-th problem","url":"http://trajepl.github.io/2017/06/18/K-th-problem/","content":"<p>This problem is well known and quite often can be found in various text books.</p>\n<p>You can take a couple of approaches to actually solve it:<br><a id=\"more\"></a></p>\n<h3 id=\"O-N-lg-N-running-time-O-1-memory\"><a href=\"#O-N-lg-N-running-time-O-1-memory\" class=\"headerlink\" title=\"O(N lg N) running time + O(1) memory\"></a>O(N lg N) running time + O(1) memory</h3><p>The simplest approach is to sort the entire input array and then access the element by it’s index (which is O(1)) operation:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = nums.length;</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[N - k];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"O-N-lg-K-running-time-O-K-memory\"><a href=\"#O-N-lg-K-running-time-O-K-memory\" class=\"headerlink\" title=\"O(N lg K) running time + O(K) memory\"></a>O(N lg K) running time + O(K) memory</h3><p>Other possibility is to use a min oriented priority queue that will store the K-th largest values. The algorithm iterates over the whole input and maintains the size of priority queue.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> PriorityQueue&lt;Integer&gt; pq = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> val : nums) &#123;</span><br><span class=\"line\">        pq.offer(val);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pq.size() &gt; k) &#123;</span><br><span class=\"line\">            pq.poll();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pq.peek();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"O-N-best-case-O-N-2-worst-case-running-time-O-1-memory\"><a href=\"#O-N-best-case-O-N-2-worst-case-running-time-O-1-memory\" class=\"headerlink\" title=\"O(N) best case / O(N^2) worst case running time + O(1) memory\"></a>O(N) best case / O(N^2) worst case running time + O(1) memory</h3><p>The smart approach for this problem is to use the selection algorithm (based on the partion method - the same one as used in quicksort).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    k = nums.length - k;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hi = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lo &lt; hi) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> j = partition(nums, lo, hi);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &lt; k) &#123;</span><br><span class=\"line\">            lo = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt; k) &#123;</span><br><span class=\"line\">            hi = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = lo;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = hi + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt; hi &amp;&amp; less(a[++i], a[lo]));</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &gt; lo &amp;&amp; less(a[lo], a[--j]));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt;= j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        exch(a, i, j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exch(a, lo, j);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> tmp = a[i];</span><br><span class=\"line\">    a[i] = a[j];</span><br><span class=\"line\">    a[j] = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">less</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v &lt; w;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"O-N-guaranteed-running-time-O-1-space\"><a href=\"#O-N-guaranteed-running-time-O-1-space\" class=\"headerlink\" title=\"O(N) guaranteed running time + O(1) space\"></a>O(N) guaranteed running time + O(1) space</h3><p>So how can we improve the above solution and make it O(N) guaranteed? The answer is quite simple, we can randomize the input, so that even when the worst case input would be provided the algorithm wouldn’t be affected. So all what it is needed to be done is to shuffle the input.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    shuffle(nums);</span><br><span class=\"line\">    k = nums.length - k;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hi = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lo &lt; hi) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> j = partition(nums, lo, hi);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &lt; k) &#123;</span><br><span class=\"line\">            lo = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt; k) &#123;</span><br><span class=\"line\">            hi = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">shuffle</span><span class=\"params\">(<span class=\"keyword\">int</span> a[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> ind = <span class=\"number\">1</span>; ind &lt; a.length; ind++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> r = random.nextInt(ind + <span class=\"number\">1</span>);</span><br><span class=\"line\">        exch(a, ind, r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>There is also worth mentioning the Blum-Floyd-Pratt-Rivest-Tarjan algorithm that has a guaranteed O(N) running time.</p>\n"},{"title":"SPARQL","url":"http://trajepl.github.io/2017/06/08/SPARQL/","content":"<h1 id=\"SPARQL\"><a href=\"#SPARQL\" class=\"headerlink\" title=\"SPARQL\"></a>SPARQL</h1><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h2 id=\"RDF-GRAPH\"><a href=\"#RDF-GRAPH\" class=\"headerlink\" title=\"RDF GRAPH\"></a>RDF GRAPH</h2><ul>\n<li><p><a href=\"https://www.w3.org/TR/rdf-syntax-grammar/\" target=\"_blank\" rel=\"external\">XML/RDF</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rdf:RDF</span>                                                                                                                                                                             </span><br><span class=\"line\">  <span class=\"attr\">xmlns:rdf</span>=<span class=\"string\">'http://www.w3.org/1999/02/22-rdf-syntax-ns#'</span></span><br><span class=\"line\">  <span class=\"attr\">xmlns:vCard</span>=<span class=\"string\">'http://www.w3.org/2001/vcard-rdf/3.0#'</span></span><br><span class=\"line\">  <span class=\"attr\">xmlns:info</span>=<span class=\"string\">'http://somewhere/peopleInfo#'</span></span><br><span class=\"line\">   &gt;</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">rdf:Description</span> <span class=\"attr\">rdf:about</span>=<span class=\"string\">\"http://somewhere/JohnSmith/\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vCard:FN</span>&gt;</span>John Smith<span class=\"tag\">&lt;/<span class=\"name\">vCard:FN</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">info:age</span> <span class=\"attr\">rdf:datatype</span>=<span class=\"string\">'http://www.w3.org/2001/XMLSchema#integer'</span>&gt;</span>25<span class=\"tag\">&lt;/<span class=\"name\">info:age</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vCard:N</span> <span class=\"attr\">rdf:parseType</span>=<span class=\"string\">\"Resource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vCard:Family</span>&gt;</span>Smith<span class=\"tag\">&lt;/<span class=\"name\">vCard:Family</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vCard:Given</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">vCard:Given</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">vCard:N</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">rdf:Description</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">rdf:RDF</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"http://www.ilrt.bris.ac.uk/discovery/2004/01/turtle/\" target=\"_blank\" rel=\"external\">TRUTLE</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@prefix vCard:   &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt; .</span><br><span class=\"line\">@prefix rdf:     &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .</span><br><span class=\"line\">@prefix :        &lt;#&gt; .</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;http://somewhere/MattJones/&gt;</span><br><span class=\"line\">    vCard:FN    &quot;Matt Jones&quot; ;</span><br><span class=\"line\">    vCard:N     [ vCard:Family</span><br><span class=\"line\">                              &quot;Jones&quot; ;</span><br><span class=\"line\">                  vCard:Given</span><br><span class=\"line\">                              &quot;Matthew&quot;</span><br><span class=\"line\">                ] .</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"http://www.w3.org/2000/10/swap/Primer\" target=\"_blank\" rel=\"external\">N3</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">like representation of turtle.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"SPARQL-QUERY\"><a href=\"#SPARQL-QUERY\" class=\"headerlink\" title=\"SPARQL QUERY\"></a>SPARQL QUERY</h2><h3 id=\"GRAPH-PATTERNS\"><a href=\"#GRAPH-PATTERNS\" class=\"headerlink\" title=\"GRAPH PATTERNS\"></a>GRAPH PATTERNS</h3><ul>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#BasicGraphPatterns\" target=\"_blank\" rel=\"external\">Basic Graph Patterns</a> : where a set of triple patterns must match<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#dataset</span><br><span class=\"line\">&lt;rdf:RDF                                                                                                                                                                                                            </span><br><span class=\"line\">  xmlns:rdf=&apos;http://www.w3.org/1999/02/22-rdf-syntax-ns#&apos;</span><br><span class=\"line\">  xmlns:vCard=&apos;http://www.w3.org/2001/vcard-rdf/3.0#&apos;</span><br><span class=\"line\">   &gt;   </span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/JohnSmith/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;John Smith&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;vCard:N rdf:parseType=&quot;Resource&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:Family&gt;Smith&lt;/vCard:Family&gt;</span><br><span class=\"line\">    &lt;vCard:Given&gt;John&lt;/vCard:Given&gt;</span><br><span class=\"line\">    &lt;/vCard:N&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/RebeccaSmith/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;Becky Smith&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;vCard:N rdf:parseType=&quot;Resource&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:Family&gt;Smith&lt;/vCard:Family&gt;</span><br><span class=\"line\">    &lt;vCard:Given&gt;Rebecca&lt;/vCard:Given&gt;</span><br><span class=\"line\">    &lt;/vCard:N&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/SarahJones/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;Sarah Jones&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;vCard:N rdf:parseType=&quot;Resource&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:Family&gt;Jones&lt;/vCard:Family&gt;</span><br><span class=\"line\">    &lt;vCard:Given&gt;Sarah&lt;/vCard:Given&gt;</span><br><span class=\"line\">    &lt;/vCard:N&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/MattJones/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;Matt Jones&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;vCard:N</span><br><span class=\"line\">    vCard:Family=&quot;Jones&quot;</span><br><span class=\"line\">    vCard:Given=&quot;Matthew&quot;/&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/rdf:RDF&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># basic graph pattern</span><br><span class=\"line\">SELECT ?givenName</span><br><span class=\"line\">WHERE &#123; </span><br><span class=\"line\">    ?y  &lt;http://www.w3.org/2001/vcard-rdf/3.0#Family&gt;  &quot;Smith&quot; .</span><br><span class=\"line\">    ?y  &lt;http://www.w3.org/2001/vcard-rdf/3.0#Given&gt;  ?givenName .</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    # same as </span><br><span class=\"line\">PREFIX vcard: &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;</span><br><span class=\"line\">SELECT ?givenName</span><br><span class=\"line\">WHERE &#123; </span><br><span class=\"line\">    ?y  vcard:Family  &quot;Smith&quot;;</span><br><span class=\"line\">        vcard:Given  ?givenName .</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># result</span><br><span class=\"line\">-------------</span><br><span class=\"line\">| givenName |</span><br><span class=\"line\">=============</span><br><span class=\"line\">| &quot;John&quot;    |</span><br><span class=\"line\">| &quot;Rebecca&quot; |</span><br><span class=\"line\">-------------</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># blank node</span><br><span class=\"line\">PREFIX vcard:      &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT ?y ?givenName</span><br><span class=\"line\">WHERE</span><br><span class=\"line\"> &#123; ?y vcard:Family &quot;Smith&quot; .</span><br><span class=\"line\">   ?y vcard:Given  ?givenName .</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> # result</span><br><span class=\"line\"> --------------------</span><br><span class=\"line\">| y    | givenName |</span><br><span class=\"line\">====================</span><br><span class=\"line\">| _:b0 | &quot;John&quot;    |</span><br><span class=\"line\">| _:b1 | &quot;Rebecca&quot; |</span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># note that: Syntax for Blank Nodes</span><br><span class=\"line\">[ :p &quot;v&quot; ] .  ||  _:a0 :p &quot;v&quot; .  # blank node </span><br><span class=\"line\">[] :p &quot;v&quot; .   # as subject </span><br><span class=\"line\">:s :q [ :p &quot;v&quot; ] . # as object</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># FILTER</span><br><span class=\"line\">PREFIX vcard: &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT ?g</span><br><span class=\"line\">WHERE&#123; </span><br><span class=\"line\">    ?y vcard:Given ?g .</span><br><span class=\"line\">    FILTER regex(?g, &quot;r&quot;, &quot;i&quot;) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#result</span><br><span class=\"line\">-------------</span><br><span class=\"line\">| g         |</span><br><span class=\"line\">=============</span><br><span class=\"line\">| &quot;Rebecca&quot; |</span><br><span class=\"line\">| &quot;Sarah&quot;   |</span><br><span class=\"line\">-------------</span><br></pre></td></tr></table></figure>\n<p>More example use <a href=\"https://www.w3.org/TR/rdf-sparql-query/#SparqlOps\" target=\"_blank\" rel=\"external\">FILTER.</a></p>\n<ul>\n<li><p><a href=\"https://www.w3.org/TR/rdf-sparql-query/#GroupPatterns\" target=\"_blank\" rel=\"external\">Group Graph Pattern</a> : where a set of graph patterns must all match</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># a group graph pattern is delimited with &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#125;  # empty graph pattern </span><br><span class=\"line\">PREFIX vcard:      &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT ?y ?givenName</span><br><span class=\"line\">WHERE &#123; </span><br><span class=\"line\">    &#123;?y vcard:Family &quot;Smith&quot; .&#125;</span><br><span class=\"line\">    &#123;?y vcard:Given  ?givenName .&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"># Result same as previous query.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://www.w3.org/TR/rdf-sparql-query/#optionals\" target=\"_blank\" rel=\"external\">Optional Graph patterns</a> : where additional patterns may extend the solution</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># dataset</span><br><span class=\"line\">&lt;rdf:RDF                                                                                                                                                                                                            </span><br><span class=\"line\">  xmlns:rdf=&apos;http://www.w3.org/1999/02/22-rdf-syntax-ns#&apos;</span><br><span class=\"line\">  xmlns:vCard=&apos;http://www.w3.org/2001/vcard-rdf/3.0#&apos;</span><br><span class=\"line\">  xmlns:info=&apos;http://somewhere/peopleInfo#&apos;</span><br><span class=\"line\">   &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/JohnSmith/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;John Smith&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;info:age rdf:datatype=&apos;http://www.w3.org/2001/XMLSchema#integer&apos;&gt;25&lt;/info:age&gt;</span><br><span class=\"line\">    &lt;vCard:N rdf:parseType=&quot;Resource&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:Family&gt;Smith&lt;/vCard:Family&gt;</span><br><span class=\"line\">    &lt;vCard:Given&gt;John&lt;/vCard:Given&gt;</span><br><span class=\"line\">    &lt;/vCard:N&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/RebeccaSmith/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;Becky Smith&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;info:age rdf:datatype=&apos;http://www.w3.org/2001/XMLSchema#integer&apos;&gt;23&lt;/info:age&gt;</span><br><span class=\"line\">    &lt;vCard:N rdf:parseType=&quot;Resource&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:Family&gt;Smith&lt;/vCard:Family&gt;</span><br><span class=\"line\">    &lt;vCard:Given&gt;Rebecca&lt;/vCard:Given&gt;</span><br><span class=\"line\">    &lt;/vCard:N&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/SarahJones/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;Sarah Jones&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;vCard:N rdf:parseType=&quot;Resource&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:Family&gt;Jones&lt;/vCard:Family&gt;</span><br><span class=\"line\">    &lt;vCard:Given&gt;Sarah&lt;/vCard:Given&gt;</span><br><span class=\"line\">    &lt;/vCard:N&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;rdf:Description rdf:about=&quot;http://somewhere/MattJones/&quot;&gt;</span><br><span class=\"line\">    &lt;vCard:FN&gt;Matt Jones&lt;/vCard:FN&gt;</span><br><span class=\"line\">    &lt;vCard:N</span><br><span class=\"line\">    vCard:Family=&quot;Jones&quot;</span><br><span class=\"line\">    vCard:Given=&quot;Matthew&quot;/&gt;</span><br><span class=\"line\">  &lt;/rdf:Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/rdf:RDF&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># OPTIONAL</span><br><span class=\"line\">PREFIX info:        &lt;http://somewhere/peopleInfo#&gt;</span><br><span class=\"line\">PREFIX vcard:      &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT ?name ?age</span><br><span class=\"line\">WHERE &#123;</span><br><span class=\"line\">    ?person vcard:FN  ?name .</span><br><span class=\"line\">    OPTIONAL &#123; ?person info:age ?age . FILTER ( ?age &gt; 24 ) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># result</span><br><span class=\"line\">-----------------------</span><br><span class=\"line\">| name          | age |</span><br><span class=\"line\">=======================</span><br><span class=\"line\">| &quot;Becky Smith&quot; |     |</span><br><span class=\"line\">| &quot;Sarah Jones&quot; |     |</span><br><span class=\"line\">| &quot;John Smith&quot;  | 25  |</span><br><span class=\"line\">| &quot;Matt Jones&quot;  |     |</span><br><span class=\"line\">-----------------------</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#alternatives\" target=\"_blank\" rel=\"external\">Alternative Graph Pattern</a> : where two or more possible patterns are tried<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#dataset </span><br><span class=\"line\">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .</span><br><span class=\"line\">@prefix vcard: &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt; .</span><br><span class=\"line\"></span><br><span class=\"line\">_:a foaf:name   &quot;Matt Jones&quot; .</span><br><span class=\"line\"></span><br><span class=\"line\">_:b foaf:name   &quot;Sarah Jones&quot; .</span><br><span class=\"line\"></span><br><span class=\"line\">_:c vcard:FN    &quot;Becky Smith&quot; .</span><br><span class=\"line\"></span><br><span class=\"line\">_:d vcard:FN    &quot;John Smith&quot; .</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># UNION</span><br><span class=\"line\">PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;</span><br><span class=\"line\">PREFIX vCard: &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT ?name1 ?name2</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   &#123; [] foaf:name ?name1 &#125; UNION &#123; [] vCard:FN ?name2 &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># result</span><br><span class=\"line\">---------------------------------</span><br><span class=\"line\">| name1         | name2         |</span><br><span class=\"line\">=================================</span><br><span class=\"line\">| &quot;Matt Jones&quot;  |               |</span><br><span class=\"line\">| &quot;Sarah Jones&quot; |               |</span><br><span class=\"line\">|               | &quot;Becky Smith&quot; |</span><br><span class=\"line\">|               | &quot;John Smith&quot;  |</span><br><span class=\"line\">---------------------------------</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#queryDataset\" target=\"_blank\" rel=\"external\">Patterns on Named Graphs</a>, where patterns are matched against named graphs<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Default graph (ds-dft.ttl):</span><br><span class=\"line\">@prefix dc: &lt;http://purl.org/dc/elements/1.1/&gt; .</span><br><span class=\"line\">@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ds-ng-1.ttl&gt; dc:date &quot;2005-07-14T03:18:56+0100&quot;^^xsd:dateTime .</span><br><span class=\"line\">&lt;ds-ng-2.ttl&gt; dc:date &quot;2005-09-22T05:53:05+0100&quot;^^xsd:dateTime .</span><br><span class=\"line\"></span><br><span class=\"line\"># Named graph (ds-ng-1.ttl):</span><br><span class=\"line\">@prefix dc: &lt;http://purl.org/dc/elements/1.1/&gt; .</span><br><span class=\"line\"></span><br><span class=\"line\">[] dc:title &quot;Harry Potter and the Philospher&apos;s Stone&quot; .</span><br><span class=\"line\">[] dc:title &quot;Harry Potter and the Chamber of Secrets&quot; .</span><br><span class=\"line\"></span><br><span class=\"line\">#Named graph (ds-ng-2.ttl):</span><br><span class=\"line\">@prefix dc: &lt;http://purl.org/dc/elements/1.1/&gt; .</span><br><span class=\"line\"></span><br><span class=\"line\">[] dc:title &quot;Harry Potter and the Sorcerer&apos;s Stone&quot; .</span><br><span class=\"line\">[] dc:title &quot;Harry Potter and the Chamber of Secrets&quot; .</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># query</span><br><span class=\"line\">PREFIX  xsd:    &lt;http://www.w3.org/2001/XMLSchema#&gt;</span><br><span class=\"line\">PREFIX  dc:     &lt;http://purl.org/dc/elements/1.1/&gt;</span><br><span class=\"line\">PREFIX  :       &lt;.&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT ?date ?title</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ?g dc:date ?date . FILTER (?date &gt; &quot;2005-08-01T00:00:00Z&quot;^^xsd:dateTime )</span><br><span class=\"line\">  GRAPH ?g</span><br><span class=\"line\">      &#123; ?b dc:title ?title &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># result</span><br><span class=\"line\">-----------------------------------------------------------------------------------------</span><br><span class=\"line\">| date                                      | title                                     |</span><br><span class=\"line\">=========================================================================================</span><br><span class=\"line\">| &quot;2005-09-22T05:53:05+01:00&quot;^^xsd:dateTime | &quot;Harry Potter and the Sorcerer&apos;s Stone&quot;   |</span><br><span class=\"line\">| &quot;2005-09-22T05:53:05+01:00&quot;^^xsd:dateTime | &quot;Harry Potter and the Chamber of Secrets&quot; |</span><br><span class=\"line\">-----------------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># specific graph </span><br><span class=\"line\">PREFIX dc: &lt;http://purl.org/dc/elements/1.1/&gt;</span><br><span class=\"line\">PREFIX : &lt;.&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT ?title</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  GRAPH :ds-ng-2.ttl</span><br><span class=\"line\">    &#123; ?b dc:title ?title &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># result</span><br><span class=\"line\">---------------------------------------------</span><br><span class=\"line\">| title                                     |</span><br><span class=\"line\">=============================================</span><br><span class=\"line\">| &quot;Harry Potter and the Sorcerer&apos;s Stone&quot;   |</span><br><span class=\"line\">| &quot;Harry Potter and the Chamber of Secrets&quot; |</span><br><span class=\"line\">---------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># note that: </span><br><span class=\"line\">GRAPH &lt;IRI&gt; &#123; ... pattern ... &#125;</span><br><span class=\"line\">GRAPH VAR &#123; ... pattern ... &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># FROM NAMED</span><br><span class=\"line\">PREFIX xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;</span><br><span class=\"line\">PREFIX dc:  &lt;http://purl.org/dc/elements/1.1/&gt;</span><br><span class=\"line\">PREFIX :    &lt;.&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM       &lt;ds-dft.ttl&gt;</span><br><span class=\"line\">FROM NAMED &lt;ds-ng-1.ttl&gt;</span><br><span class=\"line\">FROM NAMED &lt;ds-ng-2.ttl&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   &#123; ?s ?p ?o &#125; UNION &#123; GRAPH ?g &#123; ?s ?p ?o &#125; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Producing-Result-Sets\"><a href=\"#Producing-Result-Sets\" class=\"headerlink\" title=\"Producing Result Sets\"></a>Producing Result Sets</h3><h4 id=\"SPARQL-has-four-result-forms\"><a href=\"#SPARQL-has-four-result-forms\" class=\"headerlink\" title=\"SPARQL has four result forms:\"></a>SPARQL has four result forms:</h4><ul>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#select\" target=\"_blank\" rel=\"external\">SELECT</a> – Return a table of results.</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#construct\" target=\"_blank\" rel=\"external\">CONSTRUCT</a> – Return an RDF graph, based on a template in the query.</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#describe\" target=\"_blank\" rel=\"external\">DESCRIBE</a> – Return an RDF graph, based on what the query processor is configured to return.</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#ask\" target=\"_blank\" rel=\"external\">ASK</a> – Ask a boolean query.</li>\n</ul>\n<h4 id=\"Pattern-matching-produces-a-set-of-solutions-This-set-can-be-modified-in-various-ways\"><a href=\"#Pattern-matching-produces-a-set-of-solutions-This-set-can-be-modified-in-various-ways\" class=\"headerlink\" title=\"Pattern matching produces a set of solutions. This set can be modified in various ways:\"></a>Pattern matching produces a set of solutions. This set can be modified in various ways:</h4><ul>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#defn_algOrdered\" target=\"_blank\" rel=\"external\">Order By</a> modifier: put the solutions in order</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#defn_algProjection\" target=\"_blank\" rel=\"external\">Projection</a> modifier: choose certain variables</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#defn_algDistinct\" target=\"_blank\" rel=\"external\">Distinct</a> modifier: ensure solutions in the sequence are unique</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#defn_algReduced\" target=\"_blank\" rel=\"external\">Reduced</a> modifier: permit any non-unique solutions to be eliminated</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#defn_algOffset\" target=\"_blank\" rel=\"external\">Offset</a> modifier: control where the solutions start from in the overall sequence of solutions</li>\n<li><a href=\"https://www.w3.org/TR/rdf-sparql-query/#defn_algLimit\" target=\"_blank\" rel=\"external\">Limit</a> modifier: restrict the number of solutions</li>\n</ul>\n"},{"title":"Install Laravel","url":"http://trajepl.github.io/2017/06/08/laravel/","content":"<p>Larabel框架的安装方法主要有两类:</p>\n<blockquote>\n<ol>\n<li>Laravel Homestead: 此种情况的安装简单的说就是模拟一个虚拟机出来, 方便的进行apache php的安装配置.因此不需要单独对apache php的安装配置.</li>\n<li>Composer: 通过PHP-composer进行安装. Firstly, 要知道composer是php的一个依赖管理工具.当在写项目的时候,你可以用过composer对所需要的第三方依赖代码库进行下载安装. 因此这种情况下, 我们想在项目中使用laravel框架, 便通过composer来安装.</li>\n</ol>\n</blockquote>\n<p>For learning: 我们展开叙述第二种情况:(每种情况的安装都先阐述通用安装,最后介绍在arch-linux下的安装)<br><a id=\"more\"></a></p>\n<h2 id=\"Composer-Install\"><a href=\"#Composer-Install\" class=\"headerlink\" title=\"Composer Install\"></a>Composer Install</h2><p>[Composer Home Page][1] (每次打开网页composer的衣服颜色都发生改变.)</p>\n<p><em>运行安装的时候应该注意: 执行以下四行代码完毕,会在当前目目录创建一个 .composer的目录(隐藏目录) 而且会遗留下一个composer.phar文件, 执行composer.phar就可以执行composer</em><br><em>第三行代码仅仅是简单的将composer安装到当前目录下,并生成 .composer/ &amp; composer.phar. 可以用下一行代码代替第三行的代码从而指定composer安装的dirName和最后生成的composer(代替composer.phar)<br><code>php composer-setup.php --install-dir=dirName --filename=composer</code></em></p>\n<ol>\n<li>Run this in you terminal to get the latest Composer version:<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ php -r <span class=\"string\">\"copy('https://getcomposer.org/installer', 'composer-setup.php');\"</span></span><br><span class=\"line\">$ php -r <span class=\"string\">\"if (hash_file('SHA384', 'composer-setup.php') === '92102166af5abdb03f49ce52a40591073a7b859a86e8ff13338cf7db58a19f7844fbc0bb79b2773bf30791e935dbd938') &#123; echo 'Installer verified'; &#125; else &#123; echo 'Installer corrupt'; unlink('composer-setup.php'); &#125; echo PHP_EOL;\"</span></span><br><span class=\"line\">$ php composer-setup.php</span><br><span class=\"line\">$ php -r <span class=\"string\">\"unlink('composer-setup.php');\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>前三步下载安装了composer 最后一步删除了composer-setup.php</p>\n<p>以上步骤安装号之后便完成了对composer的局部安装(只能在当前安装目录下运行composer). 全局安装只需把生成的composer.phar文件(如果上一步–filename换名就用改掉后的名字)拷贝到 /user/bin/目录下.<br>终端代码:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mv composer.phar /usr/<span class=\"built_in\">local</span>/bin/composer</span><br></pre></td></tr></table></figure></p>\n<p><strong>%composer 安装测试</strong><br>转到工程文件目录, 执行<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ composer</span><br></pre></td></tr></table></figure></p>\n<p>如果出错,多半是类似如下错误:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ErrorException]                                                                                      </span><br><span class=\"line\">  is_file(): open_basedir restriction <span class=\"keyword\">in</span> effect. File(./composer.json) is not within the allowed path(  </span><br><span class=\"line\">  s): (/srv/http/:/home/:/tmp/:/usr/share/pear/:/srv/:/usr/share/webapps/:/etc/webapps:/usr/bin/compos  </span><br><span class=\"line\">  er:/home/ljp/.composer/composer.json:/root/.composer/:/usr/bin/php:/dev/tty)</span><br></pre></td></tr></table></figure></p>\n<p>即: 某某目录或者文件不在php.ini 中允许的目录里, 解决方案: 打开php.ini 添加目录进去:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/php/php.ini</span><br><span class=\"line\">$ open_basedir = /srv/http/:/home/:/tmp/:/usr/share/pear/:/srv/:/usr/share/webapps/:/etc/webapps:/usr/     bin/composer:/home/ljp/.composer/composer.json:/root/.composer/:/usr/bin/php:/dev/tty</span><br></pre></td></tr></table></figure></p>\n<p><strong>%至此composer安装完成!</strong><br><em>arch 下安装命令    so easy :)</em><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo pacmam -S php-composer</span><br></pre></td></tr></table></figure></p>\n<p>##Laravel Install<br>1 . 在composer安装目录下执行:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ composer global require <span class=\"string\">\"laravel/installer\"</span></span><br></pre></td></tr></table></figure></p>\n<p>安装后目录结构如下:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ljp@LJP .composer]$ ls</span><br><span class=\"line\">cacert.pem  composer.json  composer.lock  keys.dev.pub  keys.tags.pub  vendor</span><br></pre></td></tr></table></figure></p>\n<p>2 . 在相应工程目录文件中执行如下指令:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ laravel new blog</span><br></pre></td></tr></table></figure></p>\n<p>这个时候就会自动下载文件到当前工作blog(名字随意)目录下.</p>\n<p>3 . laravel测试及问题解决:</p>\n<blockquote>\n<p>因为使用框架的时候肯定会对当前目录进行修改,随意要确保storage/ bootstrap/cache/ 文件具有写权限制:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;$ chome -R 777 storage/ bootstrap/cache/</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>-R表示对目录下文件也执行777操作.</p>\n<p>如果是用 apache+php 搭建的环境: 在浏览器中测试的时候会产生 serve:500的错误(内置服务器错误).<br>解决方法如下:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim /etc/httpd/conf/http.conf</span><br></pre></td></tr></table></figure></p>\n<p>找到rewite模块 把注释去掉<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器中测试成功.</p>\n"},{"title":"CCF-A of DB&&DM","url":"http://trajepl.github.io/2017/05/16/CCF-A-of-DB-DM/","content":"<h1 id=\"The-famous-conferences-or-journals-of-DB-and-DM\"><a href=\"#The-famous-conferences-or-journals-of-DB-and-DM\" class=\"headerlink\" title=\"The famous conferences or journals of DB and DM\"></a>The famous conferences or journals of DB and DM</h1><a id=\"more\"></a>\n<h2 id=\"Database\"><a href=\"#Database\" class=\"headerlink\" title=\"Database\"></a>Database</h2><ul>\n<li><a href=\"http://dblp.uni-trier.de/db/conf/sigmod/\" target=\"_blank\" rel=\"external\">ACM SIGMOD Conference</a></li>\n<li><a href=\"http://dblp.uni-trier.de/db/conf/icde/\" target=\"_blank\" rel=\"external\">International Conference on Data Engineering (ICDE)</a></li>\n<li><a href=\"http://dblp.uni-trier.de/db/conf/vldb/\" target=\"_blank\" rel=\"external\">Very Large Data Bases (VLDB) Conference</a></li>\n</ul>\n<h2 id=\"Data-Mining\"><a href=\"#Data-Mining\" class=\"headerlink\" title=\"Data Mining\"></a>Data Mining</h2><ul>\n<li><a href=\"http://dblp.uni-trier.de/db/conf/kdd/\" target=\"_blank\" rel=\"external\">Knowledge Discovery and Data Mining (KDD)</a></li>\n<li><a href=\"http://dblp.uni-trier.de/db/journals/sigkdd/\" target=\"_blank\" rel=\"external\">ACM Special Interest Group on Knowledge Discovery and Data Mining (SIGKDD)</a></li>\n<li><a href=\"http://dblp.uni-trier.de/db/conf/incdm/\" target=\"_blank\" rel=\"external\">Industrial Conference on Data Mining (ICDM)</a></li>\n</ul>\n"},{"title":"Base64","url":"http://trajepl.github.io/2016/10/18/Base64/","content":"<h1 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h1><p>C and Java implements for Base64 encode and decode<br><a id=\"more\"></a></p>\n<h2 id=\"Unsigned-short-int-转换为二进制字符串\"><a href=\"#Unsigned-short-int-转换为二进制字符串\" class=\"headerlink\" title=\"Unsigned short int 转换为二进制字符串\"></a>Unsigned short int 转换为二进制字符串</h2><p>c语言中unsigned short 的数值范围是 0~65535<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">binary_print</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> v, <span class=\"keyword\">char</span> *src)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = <span class=\"keyword\">sizeof</span>(v) * <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> bit = v &amp; (<span class=\"number\">1</span> &lt;&lt; (size - i - <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bit == <span class=\"number\">0</span>) src[i]=<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t \t<span class=\"keyword\">else</span> src[i] =<span class=\"string\">'1'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tsrc[<span class=\"number\">16</span>] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实验结果展示： </p>\n<p><img src=\"https://github.com/trajepl/ljp/blob/master/pic/binary_show.png?raw=true\" alt=\"show\"></p>\n<p>通过实验，显示当输入范围不在0~65535之间的时候，转换过程结束。main函数中部分调用如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// convert to binary output.</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"-----Binary convert-----\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> v;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> flag;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> src_bit[<span class=\"number\">17</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Input a unsigned short int(end with number &lt; 0):\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;flag);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(flag &gt;= <span class=\"number\">0</span> &amp;&amp; flag &lt;= <span class=\"number\">65535</span>) &#123;</span><br><span class=\"line\">\t\tv = flag;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(v &lt; <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    binary_print(v, src_bit);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Binary char: \"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(src_bit);</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;flag);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Base64的简单实现\"><a href=\"#Base64的简单实现\" class=\"headerlink\" title=\"Base64的简单实现\"></a>Base64的简单实现</h2><p>Base64是网络上一种常见的交换码。既然是交换码，就符合交换码的主要思想：在数据通过网络传输之前对之进行编码，使之符合网络传递的要求，在接收到编码过得数据后对之进行解码，从而恢复数据。<br>Base64是如今互联网应用最多的一种编码，大多数的电子邮件软件都把它作为默认的编码方式。</p>\n<h3 id=\"编码原理：\"><a href=\"#编码原理：\" class=\"headerlink\" title=\"编码原理：\"></a>编码原理：</h3><p>编码的时候，将三个byte的数据，先后放入一个24bit的缓冲区中，先来的byte占高位。数据不足3byte的话，于缓冲区中剩下的bit用0补足。然后，每次取出6个bit，按照其值选择[a-zA-Z0-9+/]中的字符作为编码后的输出。不断进行，直到全部输入数据转换完成。</p>\n<p>如果最后剩下两个输入数据，在编码结果后加1个“=”；如果最后剩下一个输入数据，编码结果后加2个“=”；如果没有剩下任何数据，就什么都不要加，这样才可以保证资料还原的正确性。</p>\n<p>编码后的数据比原始数据略长，为原来的4/3。无论什么样的字符都会全部被编码</p>\n<p>编码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Base64Encode</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *src, <span class=\"keyword\">char</span> *des)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t <span class=\"keyword\">while</span>(*(src + len) != <span class=\"string\">'\\0'</span>) len++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(*src == <span class=\"string\">'\\0'</span> || len &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *p = src;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *p_end = src + len;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p_end - p &gt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t*des ++ = base64_index[p[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t*des ++ = base64_index[((p[<span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x30</span>) | (p[<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">4</span>)];</span><br><span class=\"line\">\t\t*des ++ = base64_index[((p[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x3C</span>) | (p[<span class=\"number\">2</span>] &gt;&gt; <span class=\"number\">6</span>)];</span><br><span class=\"line\">\t\t*des ++ = base64_index[p[<span class=\"number\">2</span>] &amp; <span class=\"number\">0x3F</span>];</span><br><span class=\"line\">\t\tp += <span class=\"number\">3</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p_end - p &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t*des++ = base64_index[p[<span class=\"number\">0</span>] &gt;&gt; <span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((p_end - p) == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t*des ++ = base64_index[( (p[<span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x30</span> ) | ( p[<span class=\"number\">1</span>] &gt;&gt; <span class=\"number\">4</span> )];  </span><br><span class=\"line\">\t\t\t*des ++ = base64_index[(p[<span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x3C</span>]; </span><br><span class=\"line\">         \t*des++ = <span class=\"string\">'='</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p_end - p == <span class=\"number\">1</span>) &#123;  </span><br><span class=\"line\">\t        *des++ = base64_index[(p[<span class=\"number\">0</span>] &lt;&lt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x30</span>];  </span><br><span class=\"line\">\t        *des++ = <span class=\"string\">'='</span>;  </span><br><span class=\"line\">        \t*des++ = <span class=\"string\">'='</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*des =<span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解码原理\"><a href=\"#解码原理\" class=\"headerlink\" title=\"解码原理\"></a>解码原理</h3><p>解码作为编码的逆过程，就显得比较简单了， 分析原先的编码过程，很容易得出最后的解码过程，代码实现如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">base64_decode_map</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(base64_index[i++] != <span class=\"string\">'\\0'</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(base64_index[i<span class=\"number\">-1</span>] == c) <span class=\"keyword\">return</span> i<span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Base64Decode</span><span class=\"params\">(<span class=\"keyword\">char</span> *src, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* des)</span> </span>&#123;</span><br><span class=\"line\">\t*des = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(src);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(len % <span class=\"number\">4</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *p = src;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *p_end = src + len;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(; p &lt; p_end; p+=<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">\t\t*des ++ = ( (base64_decode_map(p[<span class=\"number\">0</span>]) &lt;&lt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0xFC</span> ) | ( (base64_decode_map(p[<span class=\"number\">1</span>]) &gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0x03</span> );</span><br><span class=\"line\">\t\t*des ++ = ( (base64_decode_map(p[<span class=\"number\">1</span>]) &lt;&lt; <span class=\"number\">4</span>) &amp; <span class=\"number\">0xF0</span> ) | ( (base64_decode_map(p[<span class=\"number\">2</span>]) &gt;&gt; <span class=\"number\">2</span>) &amp; <span class=\"number\">0x0F</span> );</span><br><span class=\"line\">\t\t*des ++ = ( (base64_decode_map(p[<span class=\"number\">2</span>]) &lt;&lt; <span class=\"number\">6</span>) &amp; <span class=\"number\">0xC0</span> ) | ( base64_decode_map(p[<span class=\"number\">3</span>]));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( *(src + len - <span class=\"number\">2</span>) == <span class=\"string\">'='</span> ) </span><br><span class=\"line\">\t\t*(des - <span class=\"number\">2</span>) = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( *(src + len - <span class=\"number\">1</span>) == <span class=\"string\">'='</span>)</span><br><span class=\"line\">\t\t*(des - <span class=\"number\">1</span>) = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"结果展示：\"><a href=\"#结果展示：\" class=\"headerlink\" title=\"结果展示：\"></a>结果展示：</h3><p><img src=\"https://github.com/trajepl/ljp/blob/master/pic/decodeEncode.png?raw=true\" alt=\"decode\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>完整代码地址：<a href=\"https://github.com/trajepl/Base64\" target=\"_blank\" rel=\"external\">Base64</a><br>对Base64的简单实现。对于文件，图片，音频，视频等的实现的传输，Base64也发挥很大最用。随后补上Java的文件编码实现。</p>\n"},{"title":"Hello World","url":"http://trajepl.github.io/2016/05/01/hello-world/","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"category","url":"http://trajepl.github.io/category/index.html","content":""},{"title":"about","url":"http://trajepl.github.io/about/index.html","content":""},{"title":"link","url":"http://trajepl.github.io/link/index.html","content":""},{"title":"[object Object]","url":"http://trajepl.github.io/categories/index.html","content":""},{"title":"project","url":"http://trajepl.github.io/project/index.html","content":""},{"title":"search","url":"http://trajepl.github.io/search/index.html","content":""},{"title":"tag","url":"http://trajepl.github.io/tag/index.html","content":""},{"title":"tags","url":"http://trajepl.github.io/tags/index.html","content":""}]